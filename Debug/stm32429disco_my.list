
stm32429disco_my.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006328  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006534  08006534  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800653c  0800653c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000180  080066c4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  080066c4  00021c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019933  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe5  00000000  00000000  00039ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0003cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  0003d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026802  00000000  00000000  0003dff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f60  00000000  00000000  000647f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6d0e  00000000  00000000  00076752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf0  00000000  00000000  0014d4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000180 	.word	0x20000180
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080064bc 	.word	0x080064bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000184 	.word	0x20000184
 80001e8:	080064bc 	.word	0x080064bc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ea:	f000 f961 	bl	80007b0 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f857 	bl	80005a0 <SystemClock_Config>

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <bspInit+0x8c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <bspInit+0x8c>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <bspInit+0x8c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <bspInit+0x8c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a16      	ldr	r2, [pc, #88]	; (8000570 <bspInit+0x8c>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <bspInit+0x8c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <bspInit+0x8c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <bspInit+0x8c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <bspInit+0x8c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <bspInit+0x8c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <bspInit+0x8c>)
 8000550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <bspInit+0x8c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
*/


  //MX_GPIO_Init();
  MX_USB_DEVICE_Init();
 8000562:	f005 fa53 	bl	8005a0c <MX_USB_DEVICE_Init>
}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800

08000574 <delay>:



void delay(uint32_t ms)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f000 f97e 	bl	800087c <HAL_GetTick>
 8000580:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < ms){}
 8000582:	bf00      	nop
 8000584:	f000 f97a 	bl	800087c <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	d8f7      	bhi.n	8000584 <delay+0x10>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 ff7c 	bl	80064ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	; 0xa8
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fd9b 	bl	8002160 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f820 	bl	8000674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fffc 	bl	8002650 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f809 	bl	8000674 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <HAL_MspInit+0x4c>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6453      	str	r3, [r2, #68]	; 0x44
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <HAL_MspInit+0x4c>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071c:	f000 f89a 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <OTG_HS_IRQHandler+0x10>)
 800072a:	f000 fce5 	bl	80010f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20001894 	.word	0x20001894

08000738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <SystemInit+0x20>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <SystemInit+0x20>)
 8000744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000794 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000762:	490e      	ldr	r1, [pc, #56]	; (800079c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000778:	4c0b      	ldr	r4, [pc, #44]	; (80007a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000786:	f7ff ffd7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078a:	f005 fe6b 	bl	8006464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078e:	f005 fe59 	bl	8006444 <main>
  bx  lr    
 8000792:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000794:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80007a0:	08006544 	.word	0x08006544
  ldr r2, =_sbss
 80007a4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007a8:	20001c9c 	.word	0x20001c9c

080007ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_Init+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <HAL_Init+0x40>)
 80007ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_Init+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_Init+0x40>)
 80007c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_Init+0x40>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_Init+0x40>)
 80007d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f94f 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007de:	200f      	movs	r0, #15
 80007e0:	f000 f808 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e4:	f7ff ff4c 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023c00 	.word	0x40023c00

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x54>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x58>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4619      	mov	r1, r3
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f1 	udiv	r3, r3, r1
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f967 	bl	8000ae6 <HAL_SYSTICK_Config>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e00e      	b.n	8000840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d80a      	bhi.n	800083e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f92f 	bl	8000a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_InitTick+0x5c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000000 	.word	0x20000000
 800084c:	20000008 	.word	0x20000008
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x20>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x24>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_IncTick+0x24>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008
 8000878:	200003c0 	.word	0x200003c0

0800087c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_GetTick+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200003c0 	.word	0x200003c0

08000894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff ffee 	bl	800087c <HAL_GetTick>
 80008a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ac:	d005      	beq.n	80008ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_Delay+0x44>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4413      	add	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ba:	bf00      	nop
 80008bc:	f7ff ffde 	bl	800087c <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <HAL_Delay+0x28>
  {
  }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4907      	ldr	r1, [pc, #28]	; (8000978 <__NVIC_EnableIRQ+0x38>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	; 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f7ff ff8e 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff29 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff3e 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff8e 	bl	80009d0 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff31 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa2 	bl	8000a38 <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e177      	b.n	8000e0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8166 	bne.w	8000e06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d005      	beq.n	8000b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d130      	bne.n	8000bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	4013      	ands	r3, r2
 8000b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	68da      	ldr	r2, [r3, #12]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	f003 0201 	and.w	r2, r3, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d017      	beq.n	8000bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d123      	bne.n	8000c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	69b9      	ldr	r1, [r7, #24]
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80c0 	beq.w	8000e06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b66      	ldr	r3, [pc, #408]	; (8000e24 <HAL_GPIO_Init+0x324>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a65      	ldr	r2, [pc, #404]	; (8000e24 <HAL_GPIO_Init+0x324>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b63      	ldr	r3, [pc, #396]	; (8000e24 <HAL_GPIO_Init+0x324>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca2:	4a61      	ldr	r2, [pc, #388]	; (8000e28 <HAL_GPIO_Init+0x328>)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a58      	ldr	r2, [pc, #352]	; (8000e2c <HAL_GPIO_Init+0x32c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d037      	beq.n	8000d3e <HAL_GPIO_Init+0x23e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a57      	ldr	r2, [pc, #348]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d031      	beq.n	8000d3a <HAL_GPIO_Init+0x23a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a56      	ldr	r2, [pc, #344]	; (8000e34 <HAL_GPIO_Init+0x334>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d02b      	beq.n	8000d36 <HAL_GPIO_Init+0x236>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a55      	ldr	r2, [pc, #340]	; (8000e38 <HAL_GPIO_Init+0x338>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_Init+0x232>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a54      	ldr	r2, [pc, #336]	; (8000e3c <HAL_GPIO_Init+0x33c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x22e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a53      	ldr	r2, [pc, #332]	; (8000e40 <HAL_GPIO_Init+0x340>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x22a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a52      	ldr	r2, [pc, #328]	; (8000e44 <HAL_GPIO_Init+0x344>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x226>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a51      	ldr	r2, [pc, #324]	; (8000e48 <HAL_GPIO_Init+0x348>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x222>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a50      	ldr	r2, [pc, #320]	; (8000e4c <HAL_GPIO_Init+0x34c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x21e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4f      	ldr	r2, [pc, #316]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x21a>
 8000d16:	2309      	movs	r3, #9
 8000d18:	e012      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	e010      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d1e:	2308      	movs	r3, #8
 8000d20:	e00e      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d22:	2307      	movs	r3, #7
 8000d24:	e00c      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d26:	2306      	movs	r3, #6
 8000d28:	e00a      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e008      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e004      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	f002 0203 	and.w	r2, r2, #3
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	4935      	ldr	r1, [pc, #212]	; (8000e28 <HAL_GPIO_Init+0x328>)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dac:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <HAL_GPIO_Init+0x354>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	f67f ae84 	bls.w	8000b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40021400 	.word	0x40021400
 8000e44:	40021800 	.word	0x40021800
 8000e48:	40021c00 	.word	0x40021c00
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	40022400 	.word	0x40022400
 8000e54:	40013c00 	.word	0x40013c00

08000e58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	b08f      	sub	sp, #60	; 0x3c
 8000e5c:	af0a      	add	r7, sp, #40	; 0x28
 8000e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e10f      	b.n	800108a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f004 ffc7 	bl	8005e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 feba 	bl	8002c22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	687e      	ldr	r6, [r7, #4]
 8000eb6:	466d      	mov	r5, sp
 8000eb8:	f106 0410 	add.w	r4, r6, #16
 8000ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ecc:	1d33      	adds	r3, r6, #4
 8000ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f001 fd91 	bl	80029f8 <USB_CoreInit>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0d0      	b.n	800108a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fea8 	bl	8002c44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e04a      	b.n	8000f90 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	333d      	adds	r3, #61	; 0x3d
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	333c      	adds	r3, #60	; 0x3c
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	b298      	uxth	r0, r3
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	3342      	adds	r3, #66	; 0x42
 8000f36:	4602      	mov	r2, r0
 8000f38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	333f      	adds	r3, #63	; 0x3f
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3344      	adds	r3, #68	; 0x44
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3348      	adds	r3, #72	; 0x48
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	3350      	adds	r3, #80	; 0x50
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3af      	bcc.n	8000efa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e044      	b.n	800102a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	1a9b      	subs	r3, r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3301      	adds	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3b5      	bcc.n	8000fa0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	687e      	ldr	r6, [r7, #4]
 800103c:	466d      	mov	r5, sp
 800103e:	f106 0410 	add.w	r4, r6, #16
 8001042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001052:	1d33      	adds	r3, r6, #4
 8001054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f001 fe40 	bl	8002cdc <USB_DevInit>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2202      	movs	r2, #2
 8001066:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00d      	b.n	800108a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f002 febc 	bl	8003e00 <USB_DevDisconnect>

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001092 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_PCD_Start+0x1c>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e020      	b.n	80010f0 <HAL_PCD_Start+0x5e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d109      	bne.n	80010d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fd92 	bl	8002c00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fe6c 	bl	8003dbe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b08d      	sub	sp, #52	; 0x34
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 ff2a 	bl	8003f68 <USB_GetMode>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 839d 	bne.w	8001856 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fe8e 	bl	8003e42 <USB_ReadInterrupts>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 8393 	beq.w	8001854 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fe85 	bl	8003e42 <USB_ReadInterrupts>
 8001138:	4603      	mov	r3, r0
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b02      	cmp	r3, #2
 8001140:	d107      	bne.n	8001152 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f002 0202 	and.w	r2, r2, #2
 8001150:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fe73 	bl	8003e42 <USB_ReadInterrupts>
 800115c:	4603      	mov	r3, r0
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b10      	cmp	r3, #16
 8001164:	d161      	bne.n	800122a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0210 	bic.w	r2, r2, #16
 8001174:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f003 020f 	and.w	r2, r3, #15
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	3304      	adds	r3, #4
 8001194:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	0c5b      	lsrs	r3, r3, #17
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d124      	bne.n	80011ec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d035      	beq.n	800121a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011bc:	b29b      	uxth	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	6a38      	ldr	r0, [r7, #32]
 80011c2:	f002 fcaa 	bl	8003b1a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011d2:	441a      	add	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e4:	441a      	add	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	619a      	str	r2, [r3, #24]
 80011ea:	e016      	b.n	800121a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	0c5b      	lsrs	r3, r3, #17
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	2b06      	cmp	r3, #6
 80011f6:	d110      	bne.n	800121a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80011fe:	2208      	movs	r2, #8
 8001200:	4619      	mov	r1, r3
 8001202:	6a38      	ldr	r0, [r7, #32]
 8001204:	f002 fc89 	bl	8003b1a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001214:	441a      	add	r2, r3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0210 	orr.w	r2, r2, #16
 8001228:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fe07 	bl	8003e42 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800123a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800123e:	d16e      	bne.n	800131e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fe0d 	bl	8003e68 <USB_ReadDevAllOutEpInterrupt>
 800124e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001250:	e062      	b.n	8001318 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d057      	beq.n	800130c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fe32 	bl	8003ed0 <USB_ReadDevOutEPInterrupt>
 800126c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001284:	461a      	mov	r2, r3
 8001286:	2301      	movs	r3, #1
 8001288:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800128a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fdb1 	bl	8001df4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00c      	beq.n	80012b6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	015a      	lsls	r2, r3, #5
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	4413      	add	r3, r2
 80012a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a8:	461a      	mov	r2, r3
 80012aa:	2308      	movs	r3, #8
 80012ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 feab 	bl	800200c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	015a      	lsls	r2, r3, #5
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012cc:	461a      	mov	r2, r3
 80012ce:	2310      	movs	r3, #16
 80012d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d008      	beq.n	80012ee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e8:	461a      	mov	r2, r3
 80012ea:	2320      	movs	r3, #32
 80012ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	015a      	lsls	r2, r3, #5
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	4413      	add	r3, r2
 8001300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001304:	461a      	mov	r2, r3
 8001306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3301      	adds	r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	2b00      	cmp	r3, #0
 800131c:	d199      	bne.n	8001252 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fd8d 	bl	8003e42 <USB_ReadInterrupts>
 8001328:	4603      	mov	r3, r0
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001332:	f040 80c0 	bne.w	80014b6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fdae 	bl	8003e9c <USB_ReadDevAllInEpInterrupt>
 8001340:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001346:	e0b2      	b.n	80014ae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80a7 	beq.w	80014a2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fdd4 	bl	8003f0c <USB_ReadDevInEPInterrupt>
 8001364:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d057      	beq.n	8001420 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	2201      	movs	r2, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	69f9      	ldr	r1, [r7, #28]
 800138c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001390:	4013      	ands	r3, r2
 8001392:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	015a      	lsls	r2, r3, #5
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	4413      	add	r3, r2
 800139c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013a0:	461a      	mov	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d132      	bne.n	8001414 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3348      	adds	r3, #72	; 0x48
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4403      	add	r3, r0
 80013ce:	3344      	adds	r3, #68	; 0x44
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4419      	add	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4403      	add	r3, r0
 80013e2:	3348      	adds	r3, #72	; 0x48
 80013e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d113      	bne.n	8001414 <HAL_PCD_IRQHandler+0x31c>
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3350      	adds	r3, #80	; 0x50
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d108      	bne.n	8001414 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800140c:	461a      	mov	r2, r3
 800140e:	2101      	movs	r1, #1
 8001410:	f002 fddc 	bl	8003fcc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f004 fd79 	bl	8005f12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001436:	461a      	mov	r2, r3
 8001438:	2308      	movs	r3, #8
 800143a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001452:	461a      	mov	r2, r3
 8001454:	2310      	movs	r3, #16
 8001456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800146e:	461a      	mov	r2, r3
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148a:	461a      	mov	r2, r3
 800148c:	2302      	movs	r3, #2
 800148e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800149a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fc1b 	bl	8001cd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3301      	adds	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f47f af49 	bne.w	8001348 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fcc1 	bl	8003e42 <USB_ReadInterrupts>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ca:	d122      	bne.n	8001512 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d108      	bne.n	80014fc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014f2:	2100      	movs	r1, #0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fe27 	bl	8002148 <HAL_PCDEx_LPM_Callback>
 80014fa:	e002      	b.n	8001502 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f004 fd7f 	bl	8006000 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fc93 	bl	8003e42 <USB_ReadInterrupts>
 800151c:	4603      	mov	r3, r0
 800151e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001526:	d112      	bne.n	800154e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f004 fd3b 	bl	8005fb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800154c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fc75 	bl	8003e42 <USB_ReadInterrupts>
 8001558:	4603      	mov	r3, r0
 800155a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001562:	f040 80c7 	bne.w	80016f4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2110      	movs	r1, #16
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fd0f 	bl	8002fa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800158a:	e056      	b.n	800163a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001598:	461a      	mov	r2, r3
 800159a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800159e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b0:	0151      	lsls	r1, r2, #5
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	440a      	add	r2, r1
 80015b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d0:	0151      	lsls	r1, r2, #5
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	440a      	add	r2, r1
 80015d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ec:	461a      	mov	r2, r3
 80015ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	015a      	lsls	r2, r3, #5
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001604:	0151      	lsls	r1, r2, #5
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	440a      	add	r2, r1
 800160a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800160e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001612:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	4413      	add	r3, r2
 800161c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001624:	0151      	lsls	r1, r2, #5
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	440a      	add	r2, r1
 800162a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800162e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001632:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	3301      	adds	r3, #1
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001640:	429a      	cmp	r2, r3
 8001642:	d3a3      	bcc.n	800158c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001652:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001656:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	2b00      	cmp	r3, #0
 800165e:	d016      	beq.n	800168e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001670:	f043 030b 	orr.w	r3, r3, #11
 8001674:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001686:	f043 030b 	orr.w	r3, r3, #11
 800168a:	6453      	str	r3, [r2, #68]	; 0x44
 800168c:	e015      	b.n	80016ba <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b4:	f043 030b 	orr.w	r3, r3, #11
 80016b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016de:	461a      	mov	r2, r3
 80016e0:	f002 fc74 	bl	8003fcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fba2 	bl	8003e42 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001708:	d124      	bne.n	8001754 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fc38 	bl	8003f84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fca0 	bl	800305e <USB_GetDevSpeed>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681c      	ldr	r4, [r3, #0]
 800172a:	f001 f959 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 800172e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	4620      	mov	r0, r4
 800173a:	f001 f9bf 	bl	8002abc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f004 fc0f 	bl	8005f62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001752:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fb72 	bl	8003e42 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b08      	cmp	r3, #8
 8001766:	d10a      	bne.n	800177e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f004 fbec 	bl	8005f46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f002 0208 	and.w	r2, r2, #8
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fb5d 	bl	8003e42 <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001792:	d10f      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f004 fc4e 	bl	8006040 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fb42 	bl	8003e42 <USB_ReadInterrupts>
 80017be:	4603      	mov	r3, r0
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017c8:	d10f      	bne.n	80017ea <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f004 fc21 	bl	800601c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fb27 	bl	8003e42 <USB_ReadInterrupts>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fe:	d10a      	bne.n	8001816 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f004 fc2f 	bl	8006064 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fb11 	bl	8003e42 <USB_ReadInterrupts>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b04      	cmp	r3, #4
 8001828:	d115      	bne.n	8001856 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f004 fc1f 	bl	8006080 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	e000      	b.n	8001856 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001854:	bf00      	nop
    }
  }
}
 8001856:	3734      	adds	r7, #52	; 0x34
 8001858:	46bd      	mov	sp, r7
 800185a:	bd90      	pop	{r4, r7, pc}

0800185c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_PCD_SetAddress+0x1a>
 8001872:	2302      	movs	r3, #2
 8001874:	e013      	b.n	800189e <HAL_PCD_SetAddress+0x42>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fa6f 	bl	8003d72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	4608      	mov	r0, r1
 80018b0:	4611      	mov	r1, r2
 80018b2:	461a      	mov	r2, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	70fb      	strb	r3, [r7, #3]
 80018b8:	460b      	mov	r3, r1
 80018ba:	803b      	strh	r3, [r7, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da0f      	bge.n	80018ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	f003 020f 	and.w	r2, r3, #15
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	3338      	adds	r3, #56	; 0x38
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	705a      	strb	r2, [r3, #1]
 80018ea:	e00f      	b.n	800190c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 020f 	and.w	r2, r3, #15
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	3304      	adds	r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	b2da      	uxtb	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001918:	883a      	ldrh	r2, [r7, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	78ba      	ldrb	r2, [r7, #2]
 8001922:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d102      	bne.n	8001942 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_PCD_EP_Open+0xaa>
 800194c:	2302      	movs	r3, #2
 800194e:	e00e      	b.n	800196e <HAL_PCD_EP_Open+0xc8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f001 fba2 	bl	80030a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800196c:	7afb      	ldrb	r3, [r7, #11]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001986:	2b00      	cmp	r3, #0
 8001988:	da0f      	bge.n	80019aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 020f 	and.w	r2, r3, #15
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	3338      	adds	r3, #56	; 0x38
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	3304      	adds	r3, #4
 80019a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	705a      	strb	r2, [r3, #1]
 80019a8:	e00f      	b.n	80019ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	f003 020f 	and.w	r2, r3, #15
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_PCD_EP_Close+0x6e>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e00e      	b.n	8001a02 <HAL_PCD_EP_Close+0x8c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fbe0 	bl	80031b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	460b      	mov	r3, r1
 8001a18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	f003 020f 	and.w	r2, r3, #15
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	3304      	adds	r3, #4
 8001a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a66:	7afb      	ldrb	r3, [r7, #11]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	f001 febb 	bl	80037f8 <USB_EP0StartXfer>
 8001a82:	e008      	b.n	8001a96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	f001 fc6d 	bl	8003370 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 020f 	and.w	r2, r3, #15
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	460b      	mov	r3, r1
 8001ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	f003 020f 	and.w	r2, r3, #15
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	3338      	adds	r3, #56	; 0x38
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	3304      	adds	r3, #4
 8001af6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b10:	7afb      	ldrb	r3, [r7, #11]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6979      	ldr	r1, [r7, #20]
 8001b42:	f001 fe59 	bl	80037f8 <USB_EP0StartXfer>
 8001b46:	e008      	b.n	8001b5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	6979      	ldr	r1, [r7, #20]
 8001b56:	f001 fc0b 	bl	8003370 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	f003 020f 	and.w	r2, r3, #15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d901      	bls.n	8001b82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e050      	b.n	8001c24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	da0f      	bge.n	8001baa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	f003 020f 	and.w	r2, r3, #15
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	3338      	adds	r3, #56	; 0x38
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	705a      	strb	r2, [r3, #1]
 8001ba8:	e00d      	b.n	8001bc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_EP_SetStall+0x82>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e01e      	b.n	8001c24 <HAL_PCD_EP_SetStall+0xc0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 ffe8 	bl	8003bca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	b2d9      	uxtb	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c14:	461a      	mov	r2, r3
 8001c16:	f002 f9d9 	bl	8003fcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 020f 	and.w	r2, r3, #15
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d901      	bls.n	8001c4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e042      	b.n	8001cd0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0f      	bge.n	8001c72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 020f 	and.w	r2, r3, #15
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3338      	adds	r3, #56	; 0x38
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	3304      	adds	r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	705a      	strb	r2, [r3, #1]
 8001c70:	e00f      	b.n	8001c92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PCD_EP_ClrStall+0x86>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e00e      	b.n	8001cd0 <HAL_PCD_EP_ClrStall+0xa4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68f9      	ldr	r1, [r7, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fff0 	bl	8003ca6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	3338      	adds	r3, #56	; 0x38
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d901      	bls.n	8001d10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e06c      	b.n	8001dea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d902      	bls.n	8001d2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3303      	adds	r3, #3
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d34:	e02b      	b.n	8001d8e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d902      	bls.n	8001d52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3303      	adds	r3, #3
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6978      	ldr	r0, [r7, #20]
 8001d72:	f001 fe94 	bl	8003a9e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	441a      	add	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	441a      	add	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d809      	bhi.n	8001db8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d203      	bcs.n	8001db8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1be      	bne.n	8001d36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d811      	bhi.n	8001de8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	2201      	movs	r2, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	6939      	ldr	r1, [r7, #16]
 8001de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001de4:	4013      	ands	r3, r2
 8001de6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	333c      	adds	r3, #60	; 0x3c
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	f040 80a0 	bne.w	8001f6c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a72      	ldr	r2, [pc, #456]	; (8002004 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f240 80dd 	bls.w	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80d7 	beq.w	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	6093      	str	r3, [r2, #8]
 8001e60:	e0cb      	b.n	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	6093      	str	r3, [r2, #8]
 8001e7e:	e0bc      	b.n	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 80b7 	bne.w	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d90f      	bls.n	8001eb4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00a      	beq.n	8001eb4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb0:	6093      	str	r3, [r2, #8]
 8001eb2:	e0a2      	b.n	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ec6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	0159      	lsls	r1, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	440b      	add	r3, r1
 8001ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eda:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4403      	add	r3, r0
 8001eea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4403      	add	r3, r0
 8001f12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4419      	add	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4403      	add	r3, r0
 8001f28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f2c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d114      	bne.n	8001f5e <PCD_EP_OutXfrComplete_int+0x16a>
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d108      	bne.n	8001f5e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f56:	461a      	mov	r2, r3
 8001f58:	2101      	movs	r1, #1
 8001f5a:	f002 f837 	bl	8003fcc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f003 ffb9 	bl	8005edc <HAL_PCD_DataOutStageCallback>
 8001f6a:	e046      	b.n	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d124      	bne.n	8001fbe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f90:	6093      	str	r3, [r2, #8]
 8001f92:	e032      	b.n	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001faa:	461a      	mov	r2, r3
 8001fac:	2320      	movs	r3, #32
 8001fae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f003 ff90 	bl	8005edc <HAL_PCD_DataOutStageCallback>
 8001fbc:	e01d      	b.n	8001ffa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d114      	bne.n	8001fee <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d108      	bne.n	8001fee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f001 ffef 	bl	8003fcc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f003 ff71 	bl	8005edc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	4f54300a 	.word	0x4f54300a
 8002008:	4f54310a 	.word	0x4f54310a

0800200c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	333c      	adds	r3, #60	; 0x3c
 8002024:	3304      	adds	r3, #4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <PCD_EP_OutSetupPacket_int+0x88>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d90e      	bls.n	8002060 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002058:	461a      	mov	r2, r3
 800205a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f003 ff29 	bl	8005eb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <PCD_EP_OutSetupPacket_int+0x88>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d90c      	bls.n	8002088 <PCD_EP_OutSetupPacket_int+0x7c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d108      	bne.n	8002088 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002080:	461a      	mov	r2, r3
 8002082:	2101      	movs	r1, #1
 8002084:	f001 ffa2 	bl	8003fcc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	4f54300a 	.word	0x4f54300a

08002098 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
 80020a4:	4613      	mov	r3, r2
 80020a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020b6:	883b      	ldrh	r3, [r7, #0]
 80020b8:	0419      	lsls	r1, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
 80020c4:	e028      	b.n	8002118 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e00d      	b.n	80020f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	3340      	adds	r3, #64	; 0x40
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	3301      	adds	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3ec      	bcc.n	80020da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002100:	883b      	ldrh	r3, [r7, #0]
 8002102:	0418      	lsls	r0, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	3b01      	subs	r3, #1
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	4302      	orrs	r2, r0
 8002110:	3340      	adds	r3, #64	; 0x40
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e264      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d075      	beq.n	800226a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800217e:	4ba3      	ldr	r3, [pc, #652]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002192:	2b08      	cmp	r3, #8
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b9d      	ldr	r3, [pc, #628]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b99      	ldr	r3, [pc, #612]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e23f      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x74>
 80021c6:	4b91      	ldr	r3, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a90      	ldr	r2, [pc, #576]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b8b      	ldr	r3, [pc, #556]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a8a      	ldr	r2, [pc, #552]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a87      	ldr	r2, [pc, #540]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021f8:	4b84      	ldr	r3, [pc, #528]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a83      	ldr	r2, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b81      	ldr	r3, [pc, #516]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a80      	ldr	r2, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fb30 	bl	800087c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe fb2c 	bl	800087c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e204      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fb1c 	bl	800087c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe fb18 	bl	800087c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1f0      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b6c      	ldr	r3, [pc, #432]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002276:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b5c      	ldr	r3, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1c4      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b56      	ldr	r3, [pc, #344]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4952      	ldr	r1, [pc, #328]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <HAL_RCC_OscConfig+0x2b0>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fad1 	bl	800087c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe facd 	bl	800087c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1a5      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b43      	ldr	r3, [pc, #268]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4940      	ldr	r1, [pc, #256]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_OscConfig+0x2b0>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fab0 	bl	800087c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe faac 	bl	800087c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e184      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d030      	beq.n	80023ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_RCC_OscConfig+0x2b4>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fa90 	bl	800087c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe fa8c 	bl	800087c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e164      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
 800237e:	e015      	b.n	80023ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x2b4>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe fa79 	bl	800087c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe fa75 	bl	800087c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e14d      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a0 	beq.w	80024fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d121      	bne.n	800243a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe fa3b 	bl	800087c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e011      	b.n	800242e <HAL_RCC_OscConfig+0x2ce>
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	42470000 	.word	0x42470000
 8002414:	42470e80 	.word	0x42470e80
 8002418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7fe fa2e 	bl	800087c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e106      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <HAL_RCC_OscConfig+0x4e4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d106      	bne.n	8002450 <HAL_RCC_OscConfig+0x2f0>
 8002442:	4b81      	ldr	r3, [pc, #516]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a80      	ldr	r2, [pc, #512]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x32a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x312>
 8002458:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a7a      	ldr	r2, [pc, #488]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b78      	ldr	r3, [pc, #480]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a77      	ldr	r2, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x32a>
 8002472:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a74      	ldr	r2, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b72      	ldr	r3, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a71      	ldr	r2, [pc, #452]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe f9f3 	bl	800087c <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe f9ef 	bl	800087c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0c5      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x33a>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7fe f9dd 	bl	800087c <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe f9d9 	bl	800087c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0af      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a55      	ldr	r2, [pc, #340]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 809b 	beq.w	800263a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002504:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d05c      	beq.n	80025ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d141      	bne.n	800259c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_RCC_OscConfig+0x4ec>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7fe f9ad 	bl	800087c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe f9a9 	bl	800087c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e081      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	019b      	lsls	r3, r3, #6
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	3b01      	subs	r3, #1
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	4937      	ldr	r1, [pc, #220]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x4ec>)
 8002570:	2201      	movs	r2, #1
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe f982 	bl	800087c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe f97e 	bl	800087c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e056      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x41c>
 800259a:	e04e      	b.n	800263a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x4ec>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe f96b 	bl	800087c <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe f967 	bl	800087c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e03f      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025bc:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x44a>
 80025c8:	e037      	b.n	800263a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e032      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_RCC_OscConfig+0x4e8>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d028      	beq.n	8002636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d121      	bne.n	8002636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d11a      	bne.n	8002636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800260c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260e:	4293      	cmp	r3, r2
 8002610:	d111      	bne.n	8002636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	3b01      	subs	r3, #1
 8002620:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d107      	bne.n	8002636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40007000 	.word	0x40007000
 8002648:	40023800 	.word	0x40023800
 800264c:	42470060 	.word	0x42470060

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7fe f89c 	bl	800087c <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe f898 	bl	800087c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fffc 	bl	80007f4 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	08006524 	.word	0x08006524
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	2300      	movs	r3, #0
 800282e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80bd 	bhi.w	80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e0b7      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002852:	60bb      	str	r3, [r7, #8]
       break;
 8002854:	e0b7      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002858:	60bb      	str	r3, [r7, #8]
      break;
 800285a:	e0b4      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d04d      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	461a      	mov	r2, r3
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	ea02 0800 	and.w	r8, r2, r0
 800288a:	ea03 0901 	and.w	r9, r3, r1
 800288e:	4640      	mov	r0, r8
 8002890:	4649      	mov	r1, r9
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	014b      	lsls	r3, r1, #5
 800289c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028a0:	0142      	lsls	r2, r0, #5
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	ebb0 0008 	subs.w	r0, r0, r8
 80028aa:	eb61 0109 	sbc.w	r1, r1, r9
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	018b      	lsls	r3, r1, #6
 80028b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028bc:	0182      	lsls	r2, r0, #6
 80028be:	1a12      	subs	r2, r2, r0
 80028c0:	eb63 0301 	sbc.w	r3, r3, r1
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f04f 0100 	mov.w	r1, #0
 80028cc:	00d9      	lsls	r1, r3, #3
 80028ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d2:	00d0      	lsls	r0, r2, #3
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	eb12 0208 	adds.w	r2, r2, r8
 80028dc:	eb43 0309 	adc.w	r3, r3, r9
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0259      	lsls	r1, r3, #9
 80028ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028ee:	0250      	lsls	r0, r2, #9
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f7fd fc74 	bl	80001ec <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e04a      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	461a      	mov	r2, r3
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	ea02 0400 	and.w	r4, r2, r0
 8002926:	ea03 0501 	and.w	r5, r3, r1
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	014b      	lsls	r3, r1, #5
 8002938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800293c:	0142      	lsls	r2, r0, #5
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	1b00      	subs	r0, r0, r4
 8002944:	eb61 0105 	sbc.w	r1, r1, r5
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	018b      	lsls	r3, r1, #6
 8002952:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002956:	0182      	lsls	r2, r0, #6
 8002958:	1a12      	subs	r2, r2, r0
 800295a:	eb63 0301 	sbc.w	r3, r3, r1
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	00d9      	lsls	r1, r3, #3
 8002968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800296c:	00d0      	lsls	r0, r2, #3
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	1912      	adds	r2, r2, r4
 8002974:	eb45 0303 	adc.w	r3, r5, r3
 8002978:	f04f 0000 	mov.w	r0, #0
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	0299      	lsls	r1, r3, #10
 8002982:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002986:	0290      	lsls	r0, r2, #10
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	461a      	mov	r2, r3
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f7fd fc28 	bl	80001ec <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	60bb      	str	r3, [r7, #8]
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029c2:	60bb      	str	r3, [r7, #8]
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	68bb      	ldr	r3, [r7, #8]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000

080029f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029f8:	b084      	sub	sp, #16
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	f107 001c 	add.w	r0, r7, #28
 8002a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d122      	bne.n	8002a56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f001 fb1c 	bl	8004088 <USB_CoreReset>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e01a      	b.n	8002a8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f001 fb10 	bl	8004088 <USB_CoreReset>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a7e:	e005      	b.n	8002a8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10b      	bne.n	8002aaa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f043 0206 	orr.w	r2, r3, #6
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ab6:	b004      	add	sp, #16
 8002ab8:	4770      	bx	lr
	...

08002abc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d165      	bne.n	8002b9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4a41      	ldr	r2, [pc, #260]	; (8002bd8 <USB_SetTurnaroundTime+0x11c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d906      	bls.n	8002ae6 <USB_SetTurnaroundTime+0x2a>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <USB_SetTurnaroundTime+0x120>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d202      	bcs.n	8002ae6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e062      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4a3c      	ldr	r2, [pc, #240]	; (8002bdc <USB_SetTurnaroundTime+0x120>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d306      	bcc.n	8002afc <USB_SetTurnaroundTime+0x40>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <USB_SetTurnaroundTime+0x124>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d202      	bcs.n	8002afc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002af6:	230e      	movs	r3, #14
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e057      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <USB_SetTurnaroundTime+0x124>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d306      	bcc.n	8002b12 <USB_SetTurnaroundTime+0x56>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <USB_SetTurnaroundTime+0x128>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d202      	bcs.n	8002b12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002b0c:	230d      	movs	r3, #13
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e04c      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4a33      	ldr	r2, [pc, #204]	; (8002be4 <USB_SetTurnaroundTime+0x128>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d306      	bcc.n	8002b28 <USB_SetTurnaroundTime+0x6c>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4a32      	ldr	r2, [pc, #200]	; (8002be8 <USB_SetTurnaroundTime+0x12c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d802      	bhi.n	8002b28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b22:	230c      	movs	r3, #12
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e041      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <USB_SetTurnaroundTime+0x12c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d906      	bls.n	8002b3e <USB_SetTurnaroundTime+0x82>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4a2e      	ldr	r2, [pc, #184]	; (8002bec <USB_SetTurnaroundTime+0x130>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d802      	bhi.n	8002b3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b38:	230b      	movs	r3, #11
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e036      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <USB_SetTurnaroundTime+0x130>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d906      	bls.n	8002b54 <USB_SetTurnaroundTime+0x98>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <USB_SetTurnaroundTime+0x134>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d802      	bhi.n	8002b54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b4e:	230a      	movs	r3, #10
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e02b      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <USB_SetTurnaroundTime+0x134>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d906      	bls.n	8002b6a <USB_SetTurnaroundTime+0xae>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <USB_SetTurnaroundTime+0x138>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d202      	bcs.n	8002b6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b64:	2309      	movs	r3, #9
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e020      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <USB_SetTurnaroundTime+0x138>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d306      	bcc.n	8002b80 <USB_SetTurnaroundTime+0xc4>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <USB_SetTurnaroundTime+0x13c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d802      	bhi.n	8002b80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e015      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <USB_SetTurnaroundTime+0x13c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d906      	bls.n	8002b96 <USB_SetTurnaroundTime+0xda>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <USB_SetTurnaroundTime+0x140>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d202      	bcs.n	8002b96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b90:	2307      	movs	r3, #7
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e00a      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b96:	2306      	movs	r3, #6
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	e007      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e001      	b.n	8002bac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ba8:	2309      	movs	r3, #9
 8002baa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	00d8acbf 	.word	0x00d8acbf
 8002bdc:	00e4e1c0 	.word	0x00e4e1c0
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	01067380 	.word	0x01067380
 8002be8:	011a499f 	.word	0x011a499f
 8002bec:	01312cff 	.word	0x01312cff
 8002bf0:	014ca43f 	.word	0x014ca43f
 8002bf4:	016e3600 	.word	0x016e3600
 8002bf8:	01a6ab1f 	.word	0x01a6ab1f
 8002bfc:	01e84800 	.word	0x01e84800

08002c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0201 	bic.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d115      	bne.n	8002c92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f7fd fe0e 	bl	8000894 <HAL_Delay>
      ms++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f001 f972 	bl	8003f68 <USB_GetMode>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d01e      	beq.n	8002cc8 <USB_SetCurrentMode+0x84>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b31      	cmp	r3, #49	; 0x31
 8002c8e:	d9f0      	bls.n	8002c72 <USB_SetCurrentMode+0x2e>
 8002c90:	e01a      	b.n	8002cc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d115      	bne.n	8002cc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7fd fdf5 	bl	8000894 <HAL_Delay>
      ms++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f001 f959 	bl	8003f68 <USB_GetMode>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <USB_SetCurrentMode+0x84>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b31      	cmp	r3, #49	; 0x31
 8002cc0:	d9f0      	bls.n	8002ca4 <USB_SetCurrentMode+0x60>
 8002cc2:	e001      	b.n	8002cc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e005      	b.n	8002cd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b32      	cmp	r3, #50	; 0x32
 8002ccc:	d101      	bne.n	8002cd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cdc:	b084      	sub	sp, #16
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e009      	b.n	8002d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3340      	adds	r3, #64	; 0x40
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	2200      	movs	r2, #0
 8002d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0e      	cmp	r3, #14
 8002d14:	d9f2      	bls.n	8002cfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d11c      	bne.n	8002d56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d2a:	f043 0302 	orr.w	r3, r3, #2
 8002d2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
 8002d54:	e00b      	b.n	8002d6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d74:	461a      	mov	r2, r3
 8002d76:	2300      	movs	r3, #0
 8002d78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d80:	4619      	mov	r1, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d88:	461a      	mov	r2, r3
 8002d8a:	680b      	ldr	r3, [r1, #0]
 8002d8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10c      	bne.n	8002dae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f945 	bl	800302c <USB_SetDevSpeed>
 8002da2:	e008      	b.n	8002db6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002da4:	2101      	movs	r1, #1
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f940 	bl	800302c <USB_SetDevSpeed>
 8002dac:	e003      	b.n	8002db6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dae:	2103      	movs	r1, #3
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f93b 	bl	800302c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002db6:	2110      	movs	r1, #16
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8f3 	bl	8002fa4 <USB_FlushTxFifo>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f90f 	bl	8002fec <USB_FlushRxFifo>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dde:	461a      	mov	r2, r3
 8002de0:	2300      	movs	r3, #0
 8002de2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dea:	461a      	mov	r2, r3
 8002dec:	2300      	movs	r3, #0
 8002dee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	461a      	mov	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e043      	b.n	8002e8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e18:	d118      	bne.n	8002e4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e013      	b.n	8002e5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e42:	461a      	mov	r2, r3
 8002e44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e008      	b.n	8002e5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	3301      	adds	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3b7      	bcc.n	8002e02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e043      	b.n	8002f20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eae:	d118      	bne.n	8002ee2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e013      	b.n	8002ef4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e008      	b.n	8002ef4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	2300      	movs	r3, #0
 8002f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f12:	461a      	mov	r2, r3
 8002f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3b7      	bcc.n	8002e98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f043 0210 	orr.w	r2, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <USB_DevInit+0x2c4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f043 0208 	orr.w	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f9c:	b004      	add	sp, #16
 8002f9e:	4770      	bx	lr
 8002fa0:	803c3800 	.word	0x803c3800

08002fa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <USB_FlushTxFifo+0x44>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e006      	b.n	8002fdc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d0f1      	beq.n	8002fbe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	00030d40 	.word	0x00030d40

08002fec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3301      	adds	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	4a08      	ldr	r2, [pc, #32]	; (8003028 <USB_FlushRxFifo+0x3c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d901      	bls.n	800300e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e006      	b.n	800301c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b10      	cmp	r3, #16
 8003018:	d0f1      	beq.n	8002ffe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	00030d40 	.word	0x00030d40

0800302c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0306 	and.w	r3, r3, #6
 8003076:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d102      	bne.n	8003084 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
 8003082:	e00a      	b.n	800309a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d002      	beq.n	8003090 <USB_GetDevSpeed+0x32>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d102      	bne.n	8003096 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003090:	2302      	movs	r3, #2
 8003092:	75fb      	strb	r3, [r7, #23]
 8003094:	e001      	b.n	800309a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003096:	230f      	movs	r3, #15
 8003098:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d13a      	bne.n	800313a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	b29b      	uxth	r3, r3
 80030dc:	68f9      	ldr	r1, [r7, #12]
 80030de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d155      	bne.n	80031a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	78db      	ldrb	r3, [r3, #3]
 8003116:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003118:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	059b      	lsls	r3, r3, #22
 800311e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003120:	4313      	orrs	r3, r2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	0151      	lsls	r1, r2, #5
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	440a      	add	r2, r1
 800312a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800312e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e036      	b.n	80031a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11a      	bne.n	80031a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	78db      	ldrb	r3, [r3, #3]
 800318c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800318e:	430b      	orrs	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	0151      	lsls	r1, r2, #5
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	440a      	add	r2, r1
 800319a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d161      	bne.n	8003298 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ea:	d11f      	bne.n	800322c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	0151      	lsls	r1, r2, #5
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	440a      	add	r2, r1
 8003202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003206:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800320a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	0151      	lsls	r1, r2, #5
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	440a      	add	r2, r1
 8003222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003226:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800322a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	68f9      	ldr	r1, [r7, #12]
 8003248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800324c:	4013      	ands	r3, r2
 800324e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	b29b      	uxth	r3, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003270:	4013      	ands	r3, r2
 8003272:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	0159      	lsls	r1, r3, #5
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	440b      	add	r3, r1
 800328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328e:	4619      	mov	r1, r3
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <USB_DeactivateEndpoint+0x1b0>)
 8003292:	4013      	ands	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
 8003296:	e060      	b.n	800335a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ae:	d11f      	bne.n	80032f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	43db      	mvns	r3, r3
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003310:	4013      	ands	r3, r2
 8003312:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	43db      	mvns	r3, r3
 800332e:	68f9      	ldr	r1, [r7, #12]
 8003330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003334:	4013      	ands	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	0159      	lsls	r1, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	440b      	add	r3, r1
 800334e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003352:	4619      	mov	r1, r3
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <USB_DeactivateEndpoint+0x1b4>)
 8003356:	4013      	ands	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	ec337800 	.word	0xec337800
 800336c:	eff37800 	.word	0xeff37800

08003370 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b01      	cmp	r3, #1
 800338e:	f040 815c 	bne.w	800364a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d132      	bne.n	8003400 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	0151      	lsls	r1, r2, #5
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	440a      	add	r2, r1
 80033d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	0151      	lsls	r1, r2, #5
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	440a      	add	r2, r1
 80033f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f8:	0cdb      	lsrs	r3, r3, #19
 80033fa:	04db      	lsls	r3, r3, #19
 80033fc:	6113      	str	r3, [r2, #16]
 80033fe:	e074      	b.n	80034ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800341a:	0cdb      	lsrs	r3, r3, #19
 800341c:	04db      	lsls	r3, r3, #19
 800341e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800343e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6959      	ldr	r1, [r3, #20]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	440b      	add	r3, r1
 800345c:	1e59      	subs	r1, r3, #1
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	fbb1 f3f3 	udiv	r3, r1, r3
 8003466:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003468:	4b9d      	ldr	r3, [pc, #628]	; (80036e0 <USB_EPStartXfer+0x370>)
 800346a:	400b      	ands	r3, r1
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	0148      	lsls	r0, r1, #5
 8003470:	69f9      	ldr	r1, [r7, #28]
 8003472:	4401      	add	r1, r0
 8003474:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003478:	4313      	orrs	r3, r2
 800347a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	0148      	lsls	r0, r1, #5
 8003496:	69f9      	ldr	r1, [r7, #28]
 8003498:	4401      	add	r1, r0
 800349a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800349e:	4313      	orrs	r3, r2
 80034a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d11f      	bne.n	80034ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80034c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d14b      	bne.n	8003588 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d128      	bne.n	8003566 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d110      	bne.n	8003546 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	0151      	lsls	r1, r2, #5
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	440a      	add	r2, r1
 800353a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e00f      	b.n	8003566 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	0151      	lsls	r1, r2, #5
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	440a      	add	r2, r1
 800355c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003564:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	440a      	add	r2, r1
 800357c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e12f      	b.n	80037e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d015      	beq.n	80035dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8117 	beq.w	80037e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d6:	4313      	orrs	r3, r2
 80035d8:	634b      	str	r3, [r1, #52]	; 0x34
 80035da:	e105      	b.n	80037e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d110      	bne.n	800360e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003606:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e00f      	b.n	800362e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	b298      	uxth	r0, r3
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4603      	mov	r3, r0
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa2b 	bl	8003a9e <USB_WritePacket>
 8003648:	e0ce      	b.n	80037e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	0151      	lsls	r1, r2, #5
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	440a      	add	r2, r1
 8003660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003664:	0cdb      	lsrs	r3, r3, #19
 8003666:	04db      	lsls	r3, r3, #19
 8003668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	440a      	add	r2, r1
 8003680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003684:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003688:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800368c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d126      	bne.n	80036e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	69b9      	ldr	r1, [r7, #24]
 80036ae:	0148      	lsls	r0, r1, #5
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	4401      	add	r1, r0
 80036b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036b8:	4313      	orrs	r3, r2
 80036ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036da:	6113      	str	r3, [r2, #16]
 80036dc:	e036      	b.n	800374c <USB_EPStartXfer+0x3dc>
 80036de:	bf00      	nop
 80036e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	1e5a      	subs	r2, r3, #1
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	8afb      	ldrh	r3, [r7, #22]
 800370a:	04d9      	lsls	r1, r3, #19
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <USB_EPStartXfer+0x484>)
 800370e:	400b      	ands	r3, r1
 8003710:	69b9      	ldr	r1, [r7, #24]
 8003712:	0148      	lsls	r0, r1, #5
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	4401      	add	r1, r0
 8003718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800371c:	4313      	orrs	r3, r2
 800371e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	8af9      	ldrh	r1, [r7, #22]
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373c:	69b9      	ldr	r1, [r7, #24]
 800373e:	0148      	lsls	r0, r1, #5
 8003740:	69f9      	ldr	r1, [r7, #28]
 8003742:	4401      	add	r1, r0
 8003744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003748:	4313      	orrs	r3, r2
 800374a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10d      	bne.n	800376e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	68d9      	ldr	r1, [r3, #12]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	460a      	mov	r2, r1
 800376c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	78db      	ldrb	r3, [r3, #3]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d128      	bne.n	80037c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d110      	bne.n	80037a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	0151      	lsls	r1, r2, #5
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	440a      	add	r2, r1
 800379c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00f      	b.n	80037c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	1ff80000 	.word	0x1ff80000

080037f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	785b      	ldrb	r3, [r3, #1]
 8003814:	2b01      	cmp	r3, #1
 8003816:	f040 80cd 	bne.w	80039b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d132      	bne.n	8003888 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	440a      	add	r2, r1
 8003838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003840:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	440a      	add	r2, r1
 800385c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	440a      	add	r2, r1
 800387c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003880:	0cdb      	lsrs	r3, r3, #19
 8003882:	04db      	lsls	r3, r3, #19
 8003884:	6113      	str	r3, [r2, #16]
 8003886:	e04e      	b.n	8003926 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	440a      	add	r2, r1
 800389e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a2:	0cdb      	lsrs	r3, r3, #19
 80038a4:	04db      	lsls	r3, r3, #19
 80038a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d903      	bls.n	80038e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	0148      	lsls	r0, r1, #5
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	4401      	add	r1, r0
 800391e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003922:	4313      	orrs	r3, r2
 8003924:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11e      	bne.n	800396a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d009      	beq.n	8003948 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	0151      	lsls	r1, r2, #5
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	440a      	add	r2, r1
 800395e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e092      	b.n	8003a90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	440a      	add	r2, r1
 8003980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003988:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07e      	beq.n	8003a90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	6979      	ldr	r1, [r7, #20]
 80039aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ae:	4313      	orrs	r3, r2
 80039b0:	634b      	str	r3, [r1, #52]	; 0x34
 80039b2:	e06d      	b.n	8003a90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ce:	0cdb      	lsrs	r3, r3, #19
 80039d0:	04db      	lsls	r3, r3, #19
 80039d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	0148      	lsls	r0, r1, #5
 8003a42:	6979      	ldr	r1, [r7, #20]
 8003a44:	4401      	add	r1, r0
 8003a46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10d      	bne.n	8003a70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68d9      	ldr	r1, [r3, #12]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	460a      	mov	r2, r1
 8003a6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b089      	sub	sp, #36	; 0x24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003abc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d123      	bne.n	8003b0c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ac4:	88bb      	ldrh	r3, [r7, #4]
 8003ac6:	3303      	adds	r3, #3
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e018      	b.n	8003b04 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	031a      	lsls	r2, r3, #12
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ade:	461a      	mov	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	3301      	adds	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	3301      	adds	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3e2      	bcc.n	8003ad2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3724      	adds	r7, #36	; 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b08b      	sub	sp, #44	; 0x2c
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	e014      	b.n	8003b70 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	601a      	str	r2, [r3, #0]
    pDest++;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	3301      	adds	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	3301      	adds	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	3301      	adds	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	623b      	str	r3, [r7, #32]
 8003b70:	6a3a      	ldr	r2, [r7, #32]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d3e6      	bcc.n	8003b46 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003b78:	8bfb      	ldrh	r3, [r7, #30]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f107 0310 	add.w	r3, r7, #16
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	701a      	strb	r2, [r3, #0]
      i++;
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	623b      	str	r3, [r7, #32]
      pDest++;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003bb0:	8bfb      	ldrh	r3, [r7, #30]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003bb6:	8bfb      	ldrh	r3, [r7, #30]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1ea      	bne.n	8003b92 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	372c      	adds	r7, #44	; 0x2c
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d12c      	bne.n	8003c40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	db12      	blt.n	8003c1e <USB_EPSetStall+0x54>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00f      	beq.n	8003c1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e02b      	b.n	8003c98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db12      	blt.n	8003c78 <USB_EPSetStall+0xae>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00f      	beq.n	8003c78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d128      	bne.n	8003d14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	78db      	ldrb	r3, [r3, #3]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d003      	beq.n	8003cf2 <USB_EPClearStall+0x4c>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	78db      	ldrb	r3, [r3, #3]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d138      	bne.n	8003d64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	0151      	lsls	r1, r2, #5
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	440a      	add	r2, r1
 8003d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e027      	b.n	8003d64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	78db      	ldrb	r3, [r3, #3]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d003      	beq.n	8003d44 <USB_EPClearStall+0x9e>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	78db      	ldrb	r3, [r3, #3]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d10f      	bne.n	8003d64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003dd8:	f023 0303 	bic.w	r3, r3, #3
 8003ddc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dec:	f023 0302 	bic.w	r3, r3, #2
 8003df0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4013      	ands	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	0c1b      	lsrs	r3, r3, #16
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	b29b      	uxth	r3, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003efe:	68bb      	ldr	r3, [r7, #8]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	01db      	lsls	r3, r3, #7
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0301 	and.w	r3, r3, #1
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	333c      	adds	r3, #60	; 0x3c
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4a26      	ldr	r2, [pc, #152]	; (8004084 <USB_EP0_OutStart+0xb8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d90a      	bls.n	8004006 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004000:	d101      	bne.n	8004006 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e037      	b.n	8004076 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004034:	f043 0318 	orr.w	r3, r3, #24
 8004038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004048:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800404c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10f      	bne.n	8004074 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	461a      	mov	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	4f54300a 	.word	0x4f54300a

08004088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <USB_CoreReset+0x60>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e01a      	b.n	80040da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	daf3      	bge.n	8004094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <USB_CoreReset+0x60>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d0f1      	beq.n	80040bc <USB_CoreReset+0x34>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	00030d40 	.word	0x00030d40

080040ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80040fc:	f002 f95e 	bl	80063bc <USBD_static_malloc>
 8004100:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004110:	2302      	movs	r3, #2
 8004112:	e066      	b.n	80041e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7c1b      	ldrb	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d119      	bne.n	8004158 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004128:	2202      	movs	r2, #2
 800412a:	2181      	movs	r1, #129	; 0x81
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f002 f822 	bl	8006176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800413c:	2202      	movs	r2, #2
 800413e:	2101      	movs	r1, #1
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f002 f818 	bl	8006176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2210      	movs	r2, #16
 8004152:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004156:	e016      	b.n	8004186 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	2202      	movs	r2, #2
 800415c:	2181      	movs	r1, #129	; 0x81
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f002 f809 	bl	8006176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	2202      	movs	r2, #2
 800416e:	2101      	movs	r1, #1
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f002 f800 	bl	8006176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2210      	movs	r2, #16
 8004182:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004186:	2308      	movs	r3, #8
 8004188:	2203      	movs	r2, #3
 800418a:	2182      	movs	r1, #130	; 0x82
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f001 fff2 	bl	8006176 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7c1b      	ldrb	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c6:	2101      	movs	r1, #1
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f002 f8c3 	bl	8006354 <USBD_LL_PrepareReceive>
 80041ce:	e007      	b.n	80041e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041d6:	2340      	movs	r3, #64	; 0x40
 80041d8:	2101      	movs	r1, #1
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f002 f8ba 	bl	8006354 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80041f6:	2181      	movs	r1, #129	; 0x81
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f001 ffe2 	bl	80061c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004204:	2101      	movs	r1, #1
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 ffdb 	bl	80061c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004214:	2182      	movs	r1, #130	; 0x82
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f001 ffd3 	bl	80061c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004246:	4618      	mov	r0, r3
 8004248:	f002 f8c6 	bl	80063d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004270:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004284:	2303      	movs	r3, #3
 8004286:	e0af      	b.n	80043e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03f      	beq.n	8004314 <USBD_CDC_Setup+0xb4>
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 809f 	bne.w	80043d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	88db      	ldrh	r3, [r3, #6]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02e      	beq.n	8004300 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da16      	bge.n	80042da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80042b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	88d2      	ldrh	r2, [r2, #6]
 80042be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	88db      	ldrh	r3, [r3, #6]
 80042c4:	2b07      	cmp	r3, #7
 80042c6:	bf28      	it	cs
 80042c8:	2307      	movcs	r3, #7
 80042ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	89fa      	ldrh	r2, [r7, #14]
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 fb19 	bl	800590a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80042d8:	e085      	b.n	80043e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	785a      	ldrb	r2, [r3, #1]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	88db      	ldrh	r3, [r3, #6]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80042f0:	6939      	ldr	r1, [r7, #16]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	88db      	ldrh	r3, [r3, #6]
 80042f6:	461a      	mov	r2, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f001 fb32 	bl	8005962 <USBD_CtlPrepareRx>
      break;
 80042fe:	e072      	b.n	80043e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	7850      	ldrb	r0, [r2, #1]
 800430c:	2200      	movs	r2, #0
 800430e:	6839      	ldr	r1, [r7, #0]
 8004310:	4798      	blx	r3
      break;
 8004312:	e068      	b.n	80043e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b0b      	cmp	r3, #11
 800431a:	d852      	bhi.n	80043c2 <USBD_CDC_Setup+0x162>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <USBD_CDC_Setup+0xc4>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004355 	.word	0x08004355
 8004328:	080043d1 	.word	0x080043d1
 800432c:	080043c3 	.word	0x080043c3
 8004330:	080043c3 	.word	0x080043c3
 8004334:	080043c3 	.word	0x080043c3
 8004338:	080043c3 	.word	0x080043c3
 800433c:	080043c3 	.word	0x080043c3
 8004340:	080043c3 	.word	0x080043c3
 8004344:	080043c3 	.word	0x080043c3
 8004348:	080043c3 	.word	0x080043c3
 800434c:	0800437f 	.word	0x0800437f
 8004350:	080043a9 	.word	0x080043a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d107      	bne.n	8004370 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004360:	f107 030a 	add.w	r3, r7, #10
 8004364:	2202      	movs	r2, #2
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 face 	bl	800590a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800436e:	e032      	b.n	80043d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f001 fa58 	bl	8005828 <USBD_CtlError>
            ret = USBD_FAIL;
 8004378:	2303      	movs	r3, #3
 800437a:	75fb      	strb	r3, [r7, #23]
          break;
 800437c:	e02b      	b.n	80043d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800438a:	f107 030d 	add.w	r3, r7, #13
 800438e:	2201      	movs	r2, #1
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f001 fab9 	bl	800590a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004398:	e01d      	b.n	80043d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800439a:	6839      	ldr	r1, [r7, #0]
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 fa43 	bl	8005828 <USBD_CtlError>
            ret = USBD_FAIL;
 80043a2:	2303      	movs	r3, #3
 80043a4:	75fb      	strb	r3, [r7, #23]
          break;
 80043a6:	e016      	b.n	80043d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d00f      	beq.n	80043d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80043b4:	6839      	ldr	r1, [r7, #0]
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fa36 	bl	8005828 <USBD_CtlError>
            ret = USBD_FAIL;
 80043bc:	2303      	movs	r3, #3
 80043be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80043c0:	e008      	b.n	80043d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80043c2:	6839      	ldr	r1, [r7, #0]
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f001 fa2f 	bl	8005828 <USBD_CtlError>
          ret = USBD_FAIL;
 80043ca:	2303      	movs	r3, #3
 80043cc:	75fb      	strb	r3, [r7, #23]
          break;
 80043ce:	e002      	b.n	80043d6 <USBD_CDC_Setup+0x176>
          break;
 80043d0:	bf00      	nop
 80043d2:	e008      	b.n	80043e6 <USBD_CDC_Setup+0x186>
          break;
 80043d4:	bf00      	nop
      }
      break;
 80043d6:	e006      	b.n	80043e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f001 fa24 	bl	8005828 <USBD_CtlError>
      ret = USBD_FAIL;
 80043e0:	2303      	movs	r3, #3
 80043e2:	75fb      	strb	r3, [r7, #23]
      break;
 80043e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004402:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800440e:	2303      	movs	r3, #3
 8004410:	e04f      	b.n	80044b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004418:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3318      	adds	r3, #24
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d029      	beq.n	8004484 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	3318      	adds	r3, #24
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	78f9      	ldrb	r1, [r7, #3]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	460b      	mov	r3, r1
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	1a5b      	subs	r3, r3, r1
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4403      	add	r3, r0
 8004450:	3344      	adds	r3, #68	; 0x44
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	fbb2 f1f3 	udiv	r1, r2, r3
 8004458:	fb03 f301 	mul.w	r3, r3, r1
 800445c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800445e:	2b00      	cmp	r3, #0
 8004460:	d110      	bne.n	8004484 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	3318      	adds	r3, #24
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004476:	78f9      	ldrb	r1, [r7, #3]
 8004478:	2300      	movs	r3, #0
 800447a:	2200      	movs	r2, #0
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f001 ff48 	bl	8006312 <USBD_LL_Transmit>
 8004482:	e015      	b.n	80044b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	460b      	mov	r3, r1
 80044c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80044d8:	2303      	movs	r3, #3
 80044da:	e015      	b.n	8004508 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f001 ff58 	bl	8006396 <USBD_LL_GetRxDataSize>
 80044e6:	4602      	mov	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004502:	4611      	mov	r1, r2
 8004504:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800451e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004526:	2303      	movs	r3, #3
 8004528:	e01b      	b.n	8004562 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <USBD_CDC_EP0_RxReady+0x50>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800453a:	2bff      	cmp	r3, #255	; 0xff
 800453c:	d010      	beq.n	8004560 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800454c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004554:	b292      	uxth	r2, r2
 8004556:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	22ff      	movs	r2, #255	; 0xff
 800455c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2243      	movs	r2, #67	; 0x43
 8004578:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800457a:	4b03      	ldr	r3, [pc, #12]	; (8004588 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20000094 	.word	0x20000094

0800458c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2243      	movs	r2, #67	; 0x43
 8004598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800459a:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000050 	.word	0x20000050

080045ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2243      	movs	r2, #67	; 0x43
 80045b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80045ba:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	200000d8 	.word	0x200000d8

080045cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	220a      	movs	r2, #10
 80045d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80045da:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	2000000c 	.word	0x2000000c

080045ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e004      	b.n	800460a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004616:	b480      	push	{r7}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004628:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004630:	2303      	movs	r3, #3
 8004632:	e008      	b.n	8004646 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004662:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800466a:	2303      	movs	r3, #3
 800466c:	e004      	b.n	8004678 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004692:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e01a      	b.n	80046dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d114      	bne.n	80046da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046ce:	2181      	movs	r1, #129	; 0x81
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 fe1e 	bl	8006312 <USBD_LL_Transmit>

    ret = USBD_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80046fe:	2303      	movs	r3, #3
 8004700:	e016      	b.n	8004730 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7c1b      	ldrb	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004714:	2101      	movs	r1, #1
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 fe1c 	bl	8006354 <USBD_LL_PrepareReceive>
 800471c:	e007      	b.n	800472e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	2101      	movs	r1, #1
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 fe13 	bl	8006354 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800474c:	2303      	movs	r3, #3
 800474e:	e01f      	b.n	8004790 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	79fa      	ldrb	r2, [r7, #7]
 8004782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f001 fc89 	bl	800609c <USBD_LL_Init>
 800478a:	4603      	mov	r3, r0
 800478c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e016      	b.n	80047de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	f107 020e 	add.w	r2, r7, #14
 80047d0:	4610      	mov	r0, r2
 80047d2:	4798      	blx	r3
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 fca6 	bl	8006140 <USBD_LL_Start>
 80047f4:	4603      	mov	r3, r0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004820:	2303      	movs	r3, #3
 8004822:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	4611      	mov	r1, r2
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
 800483e:	4603      	mov	r3, r0
 8004840:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	4611      	mov	r1, r2
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
  }

  return USBD_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 ff90 	bl	80057b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d01a      	beq.n	80048ee <USBD_LL_SetupStage+0x72>
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d822      	bhi.n	8004902 <USBD_LL_SetupStage+0x86>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <USBD_LL_SetupStage+0x4a>
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d00a      	beq.n	80048da <USBD_LL_SetupStage+0x5e>
 80048c4:	e01d      	b.n	8004902 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa62 	bl	8004d98 <USBD_StdDevReq>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e020      	b.n	800491c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fac6 	bl	8004e74 <USBD_StdItfReq>
 80048e8:	4603      	mov	r3, r0
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e016      	b.n	800491c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fb05 	bl	8004f06 <USBD_StdEPReq>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004900:	e00c      	b.n	800491c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004908:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800490c:	b2db      	uxtb	r3, r3
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 fc75 	bl	8006200 <USBD_LL_StallEP>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
      break;
 800491a:	bf00      	nop
  }

  return ret;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	460b      	mov	r3, r1
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d138      	bne.n	80049ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004940:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004948:	2b03      	cmp	r3, #3
 800494a:	d14a      	bne.n	80049e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d913      	bls.n	8004980 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	1ad2      	subs	r2, r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	4293      	cmp	r3, r2
 8004970:	bf28      	it	cs
 8004972:	4613      	movcs	r3, r2
 8004974:	461a      	mov	r2, r3
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f001 f80f 	bl	800599c <USBD_CtlContinueRx>
 800497e:	e030      	b.n	80049e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b03      	cmp	r3, #3
 800498a:	d10b      	bne.n	80049a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f001 f80a 	bl	80059be <USBD_CtlSendStatus>
 80049aa:	e01a      	b.n	80049e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d114      	bne.n	80049e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00e      	beq.n	80049e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	7afa      	ldrb	r2, [r7, #11]
 80049ce:	4611      	mov	r1, r2
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	4798      	blx	r3
 80049d4:	4603      	mov	r3, r0
 80049d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	e000      	b.n	80049e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	460b      	mov	r3, r1
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80049fa:	7afb      	ldrb	r3, [r7, #11]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d16b      	bne.n	8004ad8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3314      	adds	r3, #20
 8004a04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d156      	bne.n	8004abe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d914      	bls.n	8004a46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	1ad2      	subs	r2, r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 ff84 	bl	8005940 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f001 fc88 	bl	8006354 <USBD_LL_PrepareReceive>
 8004a44:	e03b      	b.n	8004abe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d11c      	bne.n	8004a8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d316      	bcc.n	8004a8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d20f      	bcs.n	8004a8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2100      	movs	r1, #0
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 ff65 	bl	8005940 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2200      	movs	r2, #0
 8004a82:	2100      	movs	r1, #0
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f001 fc65 	bl	8006354 <USBD_LL_PrepareReceive>
 8004a8a:	e018      	b.n	8004abe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d10b      	bne.n	8004ab0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f001 fba4 	bl	8006200 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 ff93 	bl	80059e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d122      	bne.n	8004b0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fe98 	bl	80047fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ad6:	e01a      	b.n	8004b0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d114      	bne.n	8004b0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	7afa      	ldrb	r2, [r7, #11]
 8004afa:	4611      	mov	r1, r2
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	4798      	blx	r3
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
 8004b0c:	e000      	b.n	8004b10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e02f      	b.n	8004bac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00f      	beq.n	8004b76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6852      	ldr	r2, [r2, #4]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	4611      	mov	r1, r2
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b76:	2340      	movs	r3, #64	; 0x40
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fafa 	bl	8006176 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2240      	movs	r2, #64	; 0x40
 8004b8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b92:	2340      	movs	r3, #64	; 0x40
 8004b94:	2200      	movs	r2, #0
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f001 faec 	bl	8006176 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2240      	movs	r2, #64	; 0x40
 8004ba8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	78fa      	ldrb	r2, [r7, #3]
 8004bc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d106      	bne.n	8004c22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e012      	b.n	8004c6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d10b      	bne.n	8004c6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e014      	b.n	8004cb8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d10d      	bne.n	8004cb6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e014      	b.n	8004d04 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d10d      	bne.n	8004d02 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6852      	ldr	r2, [r2, #4]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
  }

  return USBD_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b087      	sub	sp, #28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d78:	8a3b      	ldrh	r3, [r7, #16]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d88:	89fb      	ldrh	r3, [r7, #14]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d005      	beq.n	8004dbe <USBD_StdDevReq+0x26>
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d853      	bhi.n	8004e5e <USBD_StdDevReq+0xc6>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <USBD_StdDevReq+0x3a>
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d14f      	bne.n	8004e5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd0:	e04a      	b.n	8004e68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	d83b      	bhi.n	8004e52 <USBD_StdDevReq+0xba>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <USBD_StdDevReq+0x48>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004e35 	.word	0x08004e35
 8004de4:	08004e49 	.word	0x08004e49
 8004de8:	08004e53 	.word	0x08004e53
 8004dec:	08004e3f 	.word	0x08004e3f
 8004df0:	08004e53 	.word	0x08004e53
 8004df4:	08004e13 	.word	0x08004e13
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e53 	.word	0x08004e53
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e1d 	.word	0x08004e1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9de 	bl	80051cc <USBD_GetDescriptor>
          break;
 8004e10:	e024      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fb43 	bl	80054a0 <USBD_SetAddress>
          break;
 8004e1a:	e01f      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb82 	bl	8005528 <USBD_SetConfig>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
          break;
 8004e28:	e018      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fc21 	bl	8005674 <USBD_GetConfig>
          break;
 8004e32:	e013      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fc52 	bl	80056e0 <USBD_GetStatus>
          break;
 8004e3c:	e00e      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fc81 	bl	8005748 <USBD_SetFeature>
          break;
 8004e46:	e009      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fc90 	bl	8005770 <USBD_ClrFeature>
          break;
 8004e50:	e004      	b.n	8004e5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fce7 	bl	8005828 <USBD_CtlError>
          break;
 8004e5a:	bf00      	nop
      }
      break;
 8004e5c:	e004      	b.n	8004e68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fce1 	bl	8005828 <USBD_CtlError>
      break;
 8004e66:	bf00      	nop
  }

  return ret;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop

08004e74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d005      	beq.n	8004e9a <USBD_StdItfReq+0x26>
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d82f      	bhi.n	8004ef2 <USBD_StdItfReq+0x7e>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <USBD_StdItfReq+0x26>
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d12b      	bne.n	8004ef2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d81d      	bhi.n	8004ee4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	889b      	ldrh	r3, [r3, #4]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d813      	bhi.n	8004eda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	88db      	ldrh	r3, [r3, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d110      	bne.n	8004eee <USBD_StdItfReq+0x7a>
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fd73 	bl	80059be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004ed8:	e009      	b.n	8004eee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fca3 	bl	8005828 <USBD_CtlError>
          break;
 8004ee2:	e004      	b.n	8004eee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fc9e 	bl	8005828 <USBD_CtlError>
          break;
 8004eec:	e000      	b.n	8004ef0 <USBD_StdItfReq+0x7c>
          break;
 8004eee:	bf00      	nop
      }
      break;
 8004ef0:	e004      	b.n	8004efc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fc97 	bl	8005828 <USBD_CtlError>
      break;
 8004efa:	bf00      	nop
  }

  return ret;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	889b      	ldrh	r3, [r3, #4]
 8004f18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d007      	beq.n	8004f36 <USBD_StdEPReq+0x30>
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	f200 8145 	bhi.w	80051b6 <USBD_StdEPReq+0x2b0>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00c      	beq.n	8004f4a <USBD_StdEPReq+0x44>
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	f040 8140 	bne.w	80051b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e13a      	b.n	80051c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d007      	beq.n	8004f62 <USBD_StdEPReq+0x5c>
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	f300 8129 	bgt.w	80051aa <USBD_StdEPReq+0x2a4>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d07f      	beq.n	800505c <USBD_StdEPReq+0x156>
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d03c      	beq.n	8004fda <USBD_StdEPReq+0xd4>
 8004f60:	e123      	b.n	80051aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d002      	beq.n	8004f74 <USBD_StdEPReq+0x6e>
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d016      	beq.n	8004fa0 <USBD_StdEPReq+0x9a>
 8004f72:	e02c      	b.n	8004fce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00d      	beq.n	8004f96 <USBD_StdEPReq+0x90>
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d00a      	beq.n	8004f96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f93b 	bl	8006200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 f937 	bl	8006200 <USBD_LL_StallEP>
 8004f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f94:	e020      	b.n	8004fd8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fc45 	bl	8005828 <USBD_CtlError>
              break;
 8004f9e:	e01b      	b.n	8004fd8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	885b      	ldrh	r3, [r3, #2]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10e      	bne.n	8004fc6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <USBD_StdEPReq+0xc0>
 8004fae:	7bbb      	ldrb	r3, [r7, #14]
 8004fb0:	2b80      	cmp	r3, #128	; 0x80
 8004fb2:	d008      	beq.n	8004fc6 <USBD_StdEPReq+0xc0>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	88db      	ldrh	r3, [r3, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 f91d 	bl	8006200 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fcf9 	bl	80059be <USBD_CtlSendStatus>

              break;
 8004fcc:	e004      	b.n	8004fd8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fc29 	bl	8005828 <USBD_CtlError>
              break;
 8004fd6:	bf00      	nop
          }
          break;
 8004fd8:	e0ec      	b.n	80051b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d002      	beq.n	8004fec <USBD_StdEPReq+0xe6>
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d016      	beq.n	8005018 <USBD_StdEPReq+0x112>
 8004fea:	e030      	b.n	800504e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <USBD_StdEPReq+0x108>
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d00a      	beq.n	800500e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 f8ff 	bl	8006200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 f8fb 	bl	8006200 <USBD_LL_StallEP>
 800500a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800500c:	e025      	b.n	800505a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fc09 	bl	8005828 <USBD_CtlError>
              break;
 8005016:	e020      	b.n	800505a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	885b      	ldrh	r3, [r3, #2]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11b      	bne.n	8005058 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800502a:	7bbb      	ldrb	r3, [r7, #14]
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 f905 	bl	800623e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fcc2 	bl	80059be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800504c:	e004      	b.n	8005058 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fbe9 	bl	8005828 <USBD_CtlError>
              break;
 8005056:	e000      	b.n	800505a <USBD_StdEPReq+0x154>
              break;
 8005058:	bf00      	nop
          }
          break;
 800505a:	e0ab      	b.n	80051b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d002      	beq.n	800506e <USBD_StdEPReq+0x168>
 8005068:	2b03      	cmp	r3, #3
 800506a:	d032      	beq.n	80050d2 <USBD_StdEPReq+0x1cc>
 800506c:	e097      	b.n	800519e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800506e:	7bbb      	ldrb	r3, [r7, #14]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <USBD_StdEPReq+0x17e>
 8005074:	7bbb      	ldrb	r3, [r7, #14]
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d004      	beq.n	8005084 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fbd3 	bl	8005828 <USBD_CtlError>
                break;
 8005082:	e091      	b.n	80051a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005088:	2b00      	cmp	r3, #0
 800508a:	da0b      	bge.n	80050a4 <USBD_StdEPReq+0x19e>
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	3310      	adds	r3, #16
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4413      	add	r3, r2
 80050a0:	3304      	adds	r3, #4
 80050a2:	e00b      	b.n	80050bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050a4:	7bbb      	ldrb	r3, [r7, #14]
 80050a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	3304      	adds	r3, #4
 80050bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2202      	movs	r2, #2
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fc1d 	bl	800590a <USBD_CtlSendData>
              break;
 80050d0:	e06a      	b.n	80051a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80050d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da11      	bge.n	80050fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80050da:	7bbb      	ldrb	r3, [r7, #14]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3324      	adds	r3, #36	; 0x24
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d117      	bne.n	8005124 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fb96 	bl	8005828 <USBD_CtlError>
                  break;
 80050fc:	e054      	b.n	80051a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80050fe:	7bbb      	ldrb	r3, [r7, #14]
 8005100:	f003 020f 	and.w	r2, r3, #15
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb83 	bl	8005828 <USBD_CtlError>
                  break;
 8005122:	e041      	b.n	80051a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da0b      	bge.n	8005144 <USBD_StdEPReq+0x23e>
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	3310      	adds	r3, #16
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	e00b      	b.n	800515c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005144:	7bbb      	ldrb	r3, [r7, #14]
 8005146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800515e:	7bbb      	ldrb	r3, [r7, #14]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <USBD_StdEPReq+0x264>
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d103      	bne.n	8005172 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e00e      	b.n	8005190 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005172:	7bbb      	ldrb	r3, [r7, #14]
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 f880 	bl	800627c <USBD_LL_IsStallEP>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e002      	b.n	8005190 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2202      	movs	r2, #2
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fbb7 	bl	800590a <USBD_CtlSendData>
              break;
 800519c:	e004      	b.n	80051a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800519e:	6839      	ldr	r1, [r7, #0]
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb41 	bl	8005828 <USBD_CtlError>
              break;
 80051a6:	bf00      	nop
          }
          break;
 80051a8:	e004      	b.n	80051b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fb3b 	bl	8005828 <USBD_CtlError>
          break;
 80051b2:	bf00      	nop
      }
      break;
 80051b4:	e004      	b.n	80051c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fb35 	bl	8005828 <USBD_CtlError>
      break;
 80051be:	bf00      	nop
  }

  return ret;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	885b      	ldrh	r3, [r3, #2]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	f200 8128 	bhi.w	8005442 <USBD_GetDescriptor+0x276>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <USBD_GetDescriptor+0x2c>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	08005215 	.word	0x08005215
 80051fc:	0800522d 	.word	0x0800522d
 8005200:	0800526d 	.word	0x0800526d
 8005204:	08005443 	.word	0x08005443
 8005208:	08005443 	.word	0x08005443
 800520c:	080053e3 	.word	0x080053e3
 8005210:	0800540f 	.word	0x0800540f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	7c12      	ldrb	r2, [r2, #16]
 8005220:	f107 0108 	add.w	r1, r7, #8
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
 8005228:	60f8      	str	r0, [r7, #12]
      break;
 800522a:	e112      	b.n	8005452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7c1b      	ldrb	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f107 0208 	add.w	r2, r7, #8
 8005240:	4610      	mov	r0, r2
 8005242:	4798      	blx	r3
 8005244:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	2202      	movs	r2, #2
 800524c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800524e:	e100      	b.n	8005452 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	f107 0208 	add.w	r2, r7, #8
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3
 8005260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	2202      	movs	r2, #2
 8005268:	701a      	strb	r2, [r3, #0]
      break;
 800526a:	e0f2      	b.n	8005452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	885b      	ldrh	r3, [r3, #2]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b05      	cmp	r3, #5
 8005274:	f200 80ac 	bhi.w	80053d0 <USBD_GetDescriptor+0x204>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <USBD_GetDescriptor+0xb4>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005299 	.word	0x08005299
 8005284:	080052cd 	.word	0x080052cd
 8005288:	08005301 	.word	0x08005301
 800528c:	08005335 	.word	0x08005335
 8005290:	08005369 	.word	0x08005369
 8005294:	0800539d 	.word	0x0800539d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	7c12      	ldrb	r2, [r2, #16]
 80052b0:	f107 0108 	add.w	r1, r7, #8
 80052b4:	4610      	mov	r0, r2
 80052b6:	4798      	blx	r3
 80052b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ba:	e091      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fab2 	bl	8005828 <USBD_CtlError>
            err++;
 80052c4:	7afb      	ldrb	r3, [r7, #11]
 80052c6:	3301      	adds	r3, #1
 80052c8:	72fb      	strb	r3, [r7, #11]
          break;
 80052ca:	e089      	b.n	80053e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	7c12      	ldrb	r2, [r2, #16]
 80052e4:	f107 0108 	add.w	r1, r7, #8
 80052e8:	4610      	mov	r0, r2
 80052ea:	4798      	blx	r3
 80052ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ee:	e077      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa98 	bl	8005828 <USBD_CtlError>
            err++;
 80052f8:	7afb      	ldrb	r3, [r7, #11]
 80052fa:	3301      	adds	r3, #1
 80052fc:	72fb      	strb	r3, [r7, #11]
          break;
 80052fe:	e06f      	b.n	80053e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	7c12      	ldrb	r2, [r2, #16]
 8005318:	f107 0108 	add.w	r1, r7, #8
 800531c:	4610      	mov	r0, r2
 800531e:	4798      	blx	r3
 8005320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005322:	e05d      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa7e 	bl	8005828 <USBD_CtlError>
            err++;
 800532c:	7afb      	ldrb	r3, [r7, #11]
 800532e:	3301      	adds	r3, #1
 8005330:	72fb      	strb	r3, [r7, #11]
          break;
 8005332:	e055      	b.n	80053e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	7c12      	ldrb	r2, [r2, #16]
 800534c:	f107 0108 	add.w	r1, r7, #8
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
 8005354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005356:	e043      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa64 	bl	8005828 <USBD_CtlError>
            err++;
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	3301      	adds	r3, #1
 8005364:	72fb      	strb	r3, [r7, #11]
          break;
 8005366:	e03b      	b.n	80053e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00b      	beq.n	800538c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	7c12      	ldrb	r2, [r2, #16]
 8005380:	f107 0108 	add.w	r1, r7, #8
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800538a:	e029      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa4a 	bl	8005828 <USBD_CtlError>
            err++;
 8005394:	7afb      	ldrb	r3, [r7, #11]
 8005396:	3301      	adds	r3, #1
 8005398:	72fb      	strb	r3, [r7, #11]
          break;
 800539a:	e021      	b.n	80053e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00b      	beq.n	80053c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	7c12      	ldrb	r2, [r2, #16]
 80053b4:	f107 0108 	add.w	r1, r7, #8
 80053b8:	4610      	mov	r0, r2
 80053ba:	4798      	blx	r3
 80053bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053be:	e00f      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa30 	bl	8005828 <USBD_CtlError>
            err++;
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	3301      	adds	r3, #1
 80053cc:	72fb      	strb	r3, [r7, #11]
          break;
 80053ce:	e007      	b.n	80053e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa28 	bl	8005828 <USBD_CtlError>
          err++;
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	3301      	adds	r3, #1
 80053dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80053de:	bf00      	nop
      }
      break;
 80053e0:	e037      	b.n	8005452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7c1b      	ldrb	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	f107 0208 	add.w	r2, r7, #8
 80053f6:	4610      	mov	r0, r2
 80053f8:	4798      	blx	r3
 80053fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053fc:	e029      	b.n	8005452 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053fe:	6839      	ldr	r1, [r7, #0]
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa11 	bl	8005828 <USBD_CtlError>
        err++;
 8005406:	7afb      	ldrb	r3, [r7, #11]
 8005408:	3301      	adds	r3, #1
 800540a:	72fb      	strb	r3, [r7, #11]
      break;
 800540c:	e021      	b.n	8005452 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7c1b      	ldrb	r3, [r3, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10d      	bne.n	8005432 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	f107 0208 	add.w	r2, r7, #8
 8005422:	4610      	mov	r0, r2
 8005424:	4798      	blx	r3
 8005426:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	2207      	movs	r2, #7
 800542e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005430:	e00f      	b.n	8005452 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9f7 	bl	8005828 <USBD_CtlError>
        err++;
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	3301      	adds	r3, #1
 800543e:	72fb      	strb	r3, [r7, #11]
      break;
 8005440:	e007      	b.n	8005452 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9ef 	bl	8005828 <USBD_CtlError>
      err++;
 800544a:	7afb      	ldrb	r3, [r7, #11]
 800544c:	3301      	adds	r3, #1
 800544e:	72fb      	strb	r3, [r7, #11]
      break;
 8005450:	bf00      	nop
  }

  if (err != 0U)
 8005452:	7afb      	ldrb	r3, [r7, #11]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11e      	bne.n	8005496 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	88db      	ldrh	r3, [r3, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d016      	beq.n	800548e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005460:	893b      	ldrh	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	88da      	ldrh	r2, [r3, #6]
 800546a:	893b      	ldrh	r3, [r7, #8]
 800546c:	4293      	cmp	r3, r2
 800546e:	bf28      	it	cs
 8005470:	4613      	movcs	r3, r2
 8005472:	b29b      	uxth	r3, r3
 8005474:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005476:	893b      	ldrh	r3, [r7, #8]
 8005478:	461a      	mov	r2, r3
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fa44 	bl	800590a <USBD_CtlSendData>
 8005482:	e009      	b.n	8005498 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f9ce 	bl	8005828 <USBD_CtlError>
 800548c:	e004      	b.n	8005498 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa95 	bl	80059be <USBD_CtlSendStatus>
 8005494:	e000      	b.n	8005498 <USBD_GetDescriptor+0x2cc>
    return;
 8005496:	bf00      	nop
  }
}
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop

080054a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	889b      	ldrh	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d131      	bne.n	8005516 <USBD_SetAddress+0x76>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	88db      	ldrh	r3, [r3, #6]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d12d      	bne.n	8005516 <USBD_SetAddress+0x76>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	885b      	ldrh	r3, [r3, #2]
 80054be:	2b7f      	cmp	r3, #127	; 0x7f
 80054c0:	d829      	bhi.n	8005516 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	885b      	ldrh	r3, [r3, #2]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d104      	bne.n	80054e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f9a3 	bl	8005828 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e2:	e01d      	b.n	8005520 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7bfa      	ldrb	r2, [r7, #15]
 80054e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 feef 	bl	80062d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa61 	bl	80059be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550a:	e009      	b.n	8005520 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005514:	e004      	b.n	8005520 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f985 	bl	8005828 <USBD_CtlError>
  }
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	885b      	ldrh	r3, [r3, #2]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <USBD_SetConfig+0x148>)
 800553e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005540:	4b4b      	ldr	r3, [pc, #300]	; (8005670 <USBD_SetConfig+0x148>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d905      	bls.n	8005554 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f96c 	bl	8005828 <USBD_CtlError>
    return USBD_FAIL;
 8005550:	2303      	movs	r3, #3
 8005552:	e088      	b.n	8005666 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d002      	beq.n	8005566 <USBD_SetConfig+0x3e>
 8005560:	2b03      	cmp	r3, #3
 8005562:	d025      	beq.n	80055b0 <USBD_SetConfig+0x88>
 8005564:	e071      	b.n	800564a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005566:	4b42      	ldr	r3, [pc, #264]	; (8005670 <USBD_SetConfig+0x148>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01c      	beq.n	80055a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800556e:	4b40      	ldr	r3, [pc, #256]	; (8005670 <USBD_SetConfig+0x148>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005578:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <USBD_SetConfig+0x148>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff f948 	bl	8004814 <USBD_SetClassConfig>
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f949 	bl	8005828 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005596:	e065      	b.n	8005664 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa10 	bl	80059be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2203      	movs	r2, #3
 80055a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80055a6:	e05d      	b.n	8005664 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa08 	bl	80059be <USBD_CtlSendStatus>
      break;
 80055ae:	e059      	b.n	8005664 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80055b0:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <USBD_SetConfig+0x148>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d112      	bne.n	80055de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <USBD_SetConfig+0x148>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055ca:	4b29      	ldr	r3, [pc, #164]	; (8005670 <USBD_SetConfig+0x148>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff f93b 	bl	800484c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9f1 	bl	80059be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80055dc:	e042      	b.n	8005664 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80055de:	4b24      	ldr	r3, [pc, #144]	; (8005670 <USBD_SetConfig+0x148>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d02a      	beq.n	8005642 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff f929 	bl	800484c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80055fa:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <USBD_SetConfig+0x148>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005604:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <USBD_SetConfig+0x148>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff f902 	bl	8004814 <USBD_SetClassConfig>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00f      	beq.n	800563a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f903 	bl	8005828 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff f90e 	bl	800484c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005638:	e014      	b.n	8005664 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9bf 	bl	80059be <USBD_CtlSendStatus>
      break;
 8005640:	e010      	b.n	8005664 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9bb 	bl	80059be <USBD_CtlSendStatus>
      break;
 8005648:	e00c      	b.n	8005664 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f8eb 	bl	8005828 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005652:	4b07      	ldr	r3, [pc, #28]	; (8005670 <USBD_SetConfig+0x148>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff f8f7 	bl	800484c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800565e:	2303      	movs	r3, #3
 8005660:	73fb      	strb	r3, [r7, #15]
      break;
 8005662:	bf00      	nop
  }

  return ret;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	2000019c 	.word	0x2000019c

08005674 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	88db      	ldrh	r3, [r3, #6]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d004      	beq.n	8005690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8cd 	bl	8005828 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800568e:	e023      	b.n	80056d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	dc02      	bgt.n	80056a2 <USBD_GetConfig+0x2e>
 800569c:	2b00      	cmp	r3, #0
 800569e:	dc03      	bgt.n	80056a8 <USBD_GetConfig+0x34>
 80056a0:	e015      	b.n	80056ce <USBD_GetConfig+0x5a>
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d00b      	beq.n	80056be <USBD_GetConfig+0x4a>
 80056a6:	e012      	b.n	80056ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3308      	adds	r3, #8
 80056b2:	2201      	movs	r2, #1
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f927 	bl	800590a <USBD_CtlSendData>
        break;
 80056bc:	e00c      	b.n	80056d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2201      	movs	r2, #1
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f91f 	bl	800590a <USBD_CtlSendData>
        break;
 80056cc:	e004      	b.n	80056d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f8a9 	bl	8005828 <USBD_CtlError>
        break;
 80056d6:	bf00      	nop
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d81e      	bhi.n	8005736 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	88db      	ldrh	r3, [r3, #6]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d004      	beq.n	800570a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f890 	bl	8005828 <USBD_CtlError>
        break;
 8005708:	e01a      	b.n	8005740 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f043 0202 	orr.w	r2, r3, #2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	330c      	adds	r3, #12
 800572a:	2202      	movs	r2, #2
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8eb 	bl	800590a <USBD_CtlSendData>
      break;
 8005734:	e004      	b.n	8005740 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f875 	bl	8005828 <USBD_CtlError>
      break;
 800573e:	bf00      	nop
  }
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	885b      	ldrh	r3, [r3, #2]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d106      	bne.n	8005768 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f92b 	bl	80059be <USBD_CtlSendStatus>
  }
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005780:	b2db      	uxtb	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	2b02      	cmp	r3, #2
 8005786:	d80b      	bhi.n	80057a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	885b      	ldrh	r3, [r3, #2]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10c      	bne.n	80057aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f910 	bl	80059be <USBD_CtlSendStatus>
      }
      break;
 800579e:	e004      	b.n	80057aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f840 	bl	8005828 <USBD_CtlError>
      break;
 80057a8:	e000      	b.n	80057ac <USBD_ClrFeature+0x3c>
      break;
 80057aa:	bf00      	nop
  }
}
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff fabb 	bl	8004d5a <SWAPBYTE>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff faae 	bl	8004d5a <SWAPBYTE>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff faa1 	bl	8004d5a <SWAPBYTE>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	80da      	strh	r2, [r3, #6]
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fce3 	bl	8006200 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800583a:	2100      	movs	r1, #0
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fcdf 	bl	8006200 <USBD_LL_StallEP>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d036      	beq.n	80058ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005864:	6938      	ldr	r0, [r7, #16]
 8005866:	f000 f836 	bl	80058d6 <USBD_GetLen>
 800586a:	4603      	mov	r3, r0
 800586c:	3301      	adds	r3, #1
 800586e:	b29b      	uxth	r3, r3
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4413      	add	r3, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	701a      	strb	r2, [r3, #0]
  idx++;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	3301      	adds	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	4413      	add	r3, r2
 8005890:	2203      	movs	r2, #3
 8005892:	701a      	strb	r2, [r3, #0]
  idx++;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	3301      	adds	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800589a:	e013      	b.n	80058c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4413      	add	r3, r2
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	7812      	ldrb	r2, [r2, #0]
 80058a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	3301      	adds	r3, #1
 80058ac:	613b      	str	r3, [r7, #16]
    idx++;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	3301      	adds	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	3301      	adds	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e7      	bne.n	800589c <USBD_GetString+0x52>
 80058cc:	e000      	b.n	80058d0 <USBD_GetString+0x86>
    return;
 80058ce:	bf00      	nop
  }
}
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80058e6:	e005      	b.n	80058f4 <USBD_GetLen+0x1e>
  {
    len++;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	3301      	adds	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1f5      	bne.n	80058e8 <USBD_GetLen+0x12>
  }

  return len;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2202      	movs	r2, #2
 800591a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	2100      	movs	r1, #0
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fcee 	bl	8006312 <USBD_LL_Transmit>

  return USBD_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	2100      	movs	r1, #0
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fcdd 	bl	8006312 <USBD_LL_Transmit>

  return USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2203      	movs	r2, #3
 8005972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	2100      	movs	r1, #0
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fce1 	bl	8006354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	2100      	movs	r1, #0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fcd0 	bl	8006354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80059ce:	2300      	movs	r3, #0
 80059d0:	2200      	movs	r2, #0
 80059d2:	2100      	movs	r1, #0
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fc9c 	bl	8006312 <USBD_LL_Transmit>

  return USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2205      	movs	r2, #5
 80059f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059f4:	2300      	movs	r3, #0
 80059f6:	2200      	movs	r2, #0
 80059f8:	2100      	movs	r1, #0
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fcaa 	bl	8006354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8005a10:	2201      	movs	r2, #1
 8005a12:	4912      	ldr	r1, [pc, #72]	; (8005a5c <MX_USB_DEVICE_Init+0x50>)
 8005a14:	4812      	ldr	r0, [pc, #72]	; (8005a60 <MX_USB_DEVICE_Init+0x54>)
 8005a16:	f7fe fe8f 	bl	8004738 <USBD_Init>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005a20:	f7fa fe28 	bl	8000674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8005a24:	490f      	ldr	r1, [pc, #60]	; (8005a64 <MX_USB_DEVICE_Init+0x58>)
 8005a26:	480e      	ldr	r0, [pc, #56]	; (8005a60 <MX_USB_DEVICE_Init+0x54>)
 8005a28:	f7fe feb6 	bl	8004798 <USBD_RegisterClass>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005a32:	f7fa fe1f 	bl	8000674 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8005a36:	490c      	ldr	r1, [pc, #48]	; (8005a68 <MX_USB_DEVICE_Init+0x5c>)
 8005a38:	4809      	ldr	r0, [pc, #36]	; (8005a60 <MX_USB_DEVICE_Init+0x54>)
 8005a3a:	f7fe fdd7 	bl	80045ec <USBD_CDC_RegisterInterface>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005a44:	f7fa fe16 	bl	8000674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8005a48:	4805      	ldr	r0, [pc, #20]	; (8005a60 <MX_USB_DEVICE_Init+0x54>)
 8005a4a:	f7fe fecc 	bl	80047e6 <USBD_Start>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005a54:	f7fa fe0e 	bl	8000674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000130 	.word	0x20000130
 8005a60:	200003c4 	.word	0x200003c4
 8005a64:	20000018 	.word	0x20000018
 8005a68:	2000011c 	.word	0x2000011c

08005a6c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8005a70:	2200      	movs	r2, #0
 8005a72:	4905      	ldr	r1, [pc, #20]	; (8005a88 <CDC_Init_HS+0x1c>)
 8005a74:	4805      	ldr	r0, [pc, #20]	; (8005a8c <CDC_Init_HS+0x20>)
 8005a76:	f7fe fdce 	bl	8004616 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8005a7a:	4905      	ldr	r1, [pc, #20]	; (8005a90 <CDC_Init_HS+0x24>)
 8005a7c:	4803      	ldr	r0, [pc, #12]	; (8005a8c <CDC_Init_HS+0x20>)
 8005a7e:	f7fe fde8 	bl	8004652 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a82:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000e94 	.word	0x20000e94
 8005a8c:	200003c4 	.word	0x200003c4
 8005a90:	20000694 	.word	0x20000694

08005a94 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8005a98:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	6039      	str	r1, [r7, #0]
 8005aae:	71fb      	strb	r3, [r7, #7]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2b23      	cmp	r3, #35	; 0x23
 8005ab8:	d84a      	bhi.n	8005b50 <CDC_Control_HS+0xac>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <CDC_Control_HS+0x1c>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005b51 	.word	0x08005b51
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005b51 	.word	0x08005b51
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005b51 	.word	0x08005b51
 8005ad4:	08005b51 	.word	0x08005b51
 8005ad8:	08005b51 	.word	0x08005b51
 8005adc:	08005b51 	.word	0x08005b51
 8005ae0:	08005b51 	.word	0x08005b51
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005b51 	.word	0x08005b51
 8005af0:	08005b51 	.word	0x08005b51
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b51 	.word	0x08005b51
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005b51 	.word	0x08005b51
 8005b08:	08005b51 	.word	0x08005b51
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b51 	.word	0x08005b51
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b51 	.word	0x08005b51
 8005b1c:	08005b51 	.word	0x08005b51
 8005b20:	08005b51 	.word	0x08005b51
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b51 	.word	0x08005b51
 8005b34:	08005b51 	.word	0x08005b51
 8005b38:	08005b51 	.word	0x08005b51
 8005b3c:	08005b51 	.word	0x08005b51
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b51 	.word	0x08005b51
 8005b48:	08005b51 	.word	0x08005b51
 8005b4c:	08005b51 	.word	0x08005b51
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005b50:	bf00      	nop
  }

  return (USBD_OK);
 8005b52:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4805      	ldr	r0, [pc, #20]	; (8005b84 <CDC_Receive_HS+0x24>)
 8005b6e:	f7fe fd70 	bl	8004652 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8005b72:	4804      	ldr	r0, [pc, #16]	; (8005b84 <CDC_Receive_HS+0x24>)
 8005b74:	f7fe fdb6 	bl	80046e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005b78:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	200003c4 	.word	0x200003c4

08005b88 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <CDC_Transmit_HS+0x48>)
 8005b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e00b      	b.n	8005bc6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8005bae:	887b      	ldrh	r3, [r7, #2]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4806      	ldr	r0, [pc, #24]	; (8005bd0 <CDC_Transmit_HS+0x48>)
 8005bb6:	f7fe fd2e 	bl	8004616 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8005bba:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <CDC_Transmit_HS+0x48>)
 8005bbc:	f7fe fd62 	bl	8004684 <USBD_CDC_TransmitPacket>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200003c4 	.word	0x200003c4

08005bd4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8005be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	6039      	str	r1, [r7, #0]
 8005c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2212      	movs	r2, #18
 8005c08:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8005c0a:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <USBD_HS_DeviceDescriptor+0x20>)
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	2000014c 	.word	0x2000014c

08005c1c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	6039      	str	r1, [r7, #0]
 8005c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000160 	.word	0x20000160

08005c40 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	4603      	mov	r3, r0
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	4907      	ldr	r1, [pc, #28]	; (8005c74 <USBD_HS_ProductStrDescriptor+0x34>)
 8005c56:	4808      	ldr	r0, [pc, #32]	; (8005c78 <USBD_HS_ProductStrDescriptor+0x38>)
 8005c58:	f7ff fdf7 	bl	800584a <USBD_GetString>
 8005c5c:	e004      	b.n	8005c68 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4904      	ldr	r1, [pc, #16]	; (8005c74 <USBD_HS_ProductStrDescriptor+0x34>)
 8005c62:	4805      	ldr	r0, [pc, #20]	; (8005c78 <USBD_HS_ProductStrDescriptor+0x38>)
 8005c64:	f7ff fdf1 	bl	800584a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c68:	4b02      	ldr	r3, [pc, #8]	; (8005c74 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20001694 	.word	0x20001694
 8005c78:	080064d4 	.word	0x080064d4

08005c7c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	6039      	str	r1, [r7, #0]
 8005c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	4904      	ldr	r1, [pc, #16]	; (8005c9c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8005c8c:	4804      	ldr	r0, [pc, #16]	; (8005ca0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8005c8e:	f7ff fddc 	bl	800584a <USBD_GetString>
  return USBD_StrDesc;
 8005c92:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20001694 	.word	0x20001694
 8005ca0:	080064ec 	.word	0x080064ec

08005ca4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	221a      	movs	r2, #26
 8005cb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005cb6:	f000 f843 	bl	8005d40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8005cba:	4b02      	ldr	r3, [pc, #8]	; (8005cc4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000164 	.word	0x20000164

08005cc8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	4907      	ldr	r1, [pc, #28]	; (8005cfc <USBD_HS_ConfigStrDescriptor+0x34>)
 8005cde:	4808      	ldr	r0, [pc, #32]	; (8005d00 <USBD_HS_ConfigStrDescriptor+0x38>)
 8005ce0:	f7ff fdb3 	bl	800584a <USBD_GetString>
 8005ce4:	e004      	b.n	8005cf0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	4904      	ldr	r1, [pc, #16]	; (8005cfc <USBD_HS_ConfigStrDescriptor+0x34>)
 8005cea:	4805      	ldr	r0, [pc, #20]	; (8005d00 <USBD_HS_ConfigStrDescriptor+0x38>)
 8005cec:	f7ff fdad 	bl	800584a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cf0:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20001694 	.word	0x20001694
 8005d00:	08006500 	.word	0x08006500

08005d04 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	6039      	str	r1, [r7, #0]
 8005d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d105      	bne.n	8005d22 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4907      	ldr	r1, [pc, #28]	; (8005d38 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8005d1a:	4808      	ldr	r0, [pc, #32]	; (8005d3c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8005d1c:	f7ff fd95 	bl	800584a <USBD_GetString>
 8005d20:	e004      	b.n	8005d2c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4904      	ldr	r1, [pc, #16]	; (8005d38 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8005d26:	4805      	ldr	r0, [pc, #20]	; (8005d3c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8005d28:	f7ff fd8f 	bl	800584a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d2c:	4b02      	ldr	r3, [pc, #8]	; (8005d38 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20001694 	.word	0x20001694
 8005d3c:	0800650c 	.word	0x0800650c

08005d40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <Get_SerialNum+0x44>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005d4c:	4b0e      	ldr	r3, [pc, #56]	; (8005d88 <Get_SerialNum+0x48>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <Get_SerialNum+0x4c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005d66:	2208      	movs	r2, #8
 8005d68:	4909      	ldr	r1, [pc, #36]	; (8005d90 <Get_SerialNum+0x50>)
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 f814 	bl	8005d98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d70:	2204      	movs	r2, #4
 8005d72:	4908      	ldr	r1, [pc, #32]	; (8005d94 <Get_SerialNum+0x54>)
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f000 f80f 	bl	8005d98 <IntToUnicode>
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	1fff7a10 	.word	0x1fff7a10
 8005d88:	1fff7a14 	.word	0x1fff7a14
 8005d8c:	1fff7a18 	.word	0x1fff7a18
 8005d90:	20000166 	.word	0x20000166
 8005d94:	20000176 	.word	0x20000176

08005d98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]
 8005dae:	e027      	b.n	8005e00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	0f1b      	lsrs	r3, r3, #28
 8005db4:	2b09      	cmp	r3, #9
 8005db6:	d80b      	bhi.n	8005dd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	0f1b      	lsrs	r3, r3, #28
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3230      	adds	r2, #48	; 0x30
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e00a      	b.n	8005de6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	0f1b      	lsrs	r3, r3, #28
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4619      	mov	r1, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	440b      	add	r3, r1
 8005de0:	3237      	adds	r2, #55	; 0x37
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	3301      	adds	r3, #1
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4413      	add	r3, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	75fb      	strb	r3, [r7, #23]
 8005e00:	7dfa      	ldrb	r2, [r7, #23]
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d3d3      	bcc.n	8005db0 <IntToUnicode+0x18>
  }
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e20:	f107 0314 	add.w	r3, r7, #20
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	60da      	str	r2, [r3, #12]
 8005e2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1d      	ldr	r2, [pc, #116]	; (8005eac <HAL_PCD_MspInit+0x94>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d134      	bne.n	8005ea4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <HAL_PCD_MspInit+0x98>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_PCD_MspInit+0x98>)
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4a:	4b19      	ldr	r3, [pc, #100]	; (8005eb0 <HAL_PCD_MspInit+0x98>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005e56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e64:	2303      	movs	r3, #3
 8005e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005e68:	230c      	movs	r3, #12
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e6c:	f107 0314 	add.w	r3, r7, #20
 8005e70:	4619      	mov	r1, r3
 8005e72:	4810      	ldr	r0, [pc, #64]	; (8005eb4 <HAL_PCD_MspInit+0x9c>)
 8005e74:	f7fa fe44 	bl	8000b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <HAL_PCD_MspInit+0x98>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <HAL_PCD_MspInit+0x98>)
 8005e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e86:	6313      	str	r3, [r2, #48]	; 0x30
 8005e88:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <HAL_PCD_MspInit+0x98>)
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8005e94:	2200      	movs	r2, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	204d      	movs	r0, #77	; 0x4d
 8005e9a:	f7fa fdfa 	bl	8000a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005e9e:	204d      	movs	r0, #77	; 0x4d
 8005ea0:	f7fa fe13 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40040000 	.word	0x40040000
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020400 	.word	0x40020400

08005eb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	f7fe fcd4 	bl	800487c <USBD_LL_SetupStage>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	4619      	mov	r1, r3
 8005f06:	f7fe fd0e 	bl	8004926 <USBD_LL_DataOutStage>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	3348      	adds	r3, #72	; 0x48
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7fe fd57 	bl	80049ec <USBD_LL_DataInStage>
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe fe6b 	bl	8004c30 <USBD_LL_SOF>
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
 8005f7a:	e008      	b.n	8005f8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d102      	bne.n	8005f8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	e001      	b.n	8005f8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005f8a:	f7fa fb73 	bl	8000674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f94:	7bfa      	ldrb	r2, [r7, #15]
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fe0b 	bl	8004bb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fdb7 	bl	8004b18 <USBD_LL_Reset>
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fe06 	bl	8004bd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005fe8:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <HAL_PCD_SuspendCallback+0x48>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	4a03      	ldr	r2, [pc, #12]	; (8005ffc <HAL_PCD_SuspendCallback+0x48>)
 8005fee:	f043 0306 	orr.w	r3, r3, #6
 8005ff2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fdf6 	bl	8004c00 <USBD_LL_Resume>
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fe44 	bl	8004cc0 <USBD_LL_IsoOUTIncomplete>
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fe0c 	bl	8004c74 <USBD_LL_IsoINIncomplete>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fe4a 	bl	8004d0c <USBD_LL_DevConnected>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fe47 	bl	8004d22 <USBD_LL_DevDisconnected>
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d140      	bne.n	800612e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80060ac:	4a22      	ldr	r2, [pc, #136]	; (8006138 <USBD_LL_Init+0x9c>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a20      	ldr	r2, [pc, #128]	; (8006138 <USBD_LL_Init+0x9c>)
 80060b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <USBD_LL_Init+0x9c>)
 80060be:	4a1f      	ldr	r2, [pc, #124]	; (800613c <USBD_LL_Init+0xa0>)
 80060c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <USBD_LL_Init+0x9c>)
 80060c4:	2206      	movs	r2, #6
 80060c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80060c8:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <USBD_LL_Init+0x9c>)
 80060ca:	2202      	movs	r2, #2
 80060cc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80060ce:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <USBD_LL_Init+0x9c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <USBD_LL_Init+0x9c>)
 80060d6:	2202      	movs	r2, #2
 80060d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80060da:	4b17      	ldr	r3, [pc, #92]	; (8006138 <USBD_LL_Init+0x9c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80060e0:	4b15      	ldr	r3, [pc, #84]	; (8006138 <USBD_LL_Init+0x9c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <USBD_LL_Init+0x9c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <USBD_LL_Init+0x9c>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <USBD_LL_Init+0x9c>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <USBD_LL_Init+0x9c>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80060fe:	480e      	ldr	r0, [pc, #56]	; (8006138 <USBD_LL_Init+0x9c>)
 8006100:	f7fa feaa 	bl	8000e58 <HAL_PCD_Init>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800610a:	f7fa fab3 	bl	8000674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800610e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006112:	4809      	ldr	r0, [pc, #36]	; (8006138 <USBD_LL_Init+0x9c>)
 8006114:	f7fc f807 	bl	8002126 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8006118:	2280      	movs	r2, #128	; 0x80
 800611a:	2100      	movs	r1, #0
 800611c:	4806      	ldr	r0, [pc, #24]	; (8006138 <USBD_LL_Init+0x9c>)
 800611e:	f7fb ffbb 	bl	8002098 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8006122:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006126:	2101      	movs	r1, #1
 8006128:	4803      	ldr	r0, [pc, #12]	; (8006138 <USBD_LL_Init+0x9c>)
 800612a:	f7fb ffb5 	bl	8002098 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20001894 	.word	0x20001894
 800613c:	40040000 	.word	0x40040000

08006140 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fa ff9b 	bl	8001092 <HAL_PCD_Start>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f942 	bl	80063ec <USBD_Get_USB_Status>
 8006168:	4603      	mov	r3, r0
 800616a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800616c:	7bbb      	ldrb	r3, [r7, #14]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	4608      	mov	r0, r1
 8006180:	4611      	mov	r1, r2
 8006182:	461a      	mov	r2, r3
 8006184:	4603      	mov	r3, r0
 8006186:	70fb      	strb	r3, [r7, #3]
 8006188:	460b      	mov	r3, r1
 800618a:	70bb      	strb	r3, [r7, #2]
 800618c:	4613      	mov	r3, r2
 800618e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800619e:	78bb      	ldrb	r3, [r7, #2]
 80061a0:	883a      	ldrh	r2, [r7, #0]
 80061a2:	78f9      	ldrb	r1, [r7, #3]
 80061a4:	f7fb fb7f 	bl	80018a6 <HAL_PCD_EP_Open>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 f91c 	bl	80063ec <USBD_Get_USB_Status>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fb fbc8 	bl	8001976 <HAL_PCD_EP_Close>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f8fd 	bl	80063ec <USBD_Get_USB_Status>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	4611      	mov	r1, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f7fb fca0 	bl	8001b64 <HAL_PCD_EP_SetStall>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f8de 	bl	80063ec <USBD_Get_USB_Status>
 8006230:	4603      	mov	r3, r0
 8006232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006234:	7bbb      	ldrb	r3, [r7, #14]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f7fb fce5 	bl	8001c2c <HAL_PCD_EP_ClrStall>
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 f8bf 	bl	80063ec <USBD_Get_USB_Status>
 800626e:	4603      	mov	r3, r0
 8006270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006272:	7bbb      	ldrb	r3, [r7, #14]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800628e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006294:	2b00      	cmp	r3, #0
 8006296:	da0b      	bge.n	80062b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800629e:	68f9      	ldr	r1, [r7, #12]
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	333e      	adds	r3, #62	; 0x3e
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	e00b      	b.n	80062c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80062c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fb fab2 	bl	800185c <HAL_PCD_SetAddress>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 f874 	bl	80063ec <USBD_Get_USB_Status>
 8006304:	4603      	mov	r3, r0
 8006306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006308:	7bbb      	ldrb	r3, [r7, #14]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	460b      	mov	r3, r1
 8006320:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006330:	7af9      	ldrb	r1, [r7, #11]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	f7fb fbcb 	bl	8001ad0 <HAL_PCD_EP_Transmit>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f853 	bl	80063ec <USBD_Get_USB_Status>
 8006346:	4603      	mov	r3, r0
 8006348:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800634a:	7dbb      	ldrb	r3, [r7, #22]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	460b      	mov	r3, r1
 8006362:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006372:	7af9      	ldrb	r1, [r7, #11]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	f7fb fb47 	bl	8001a0a <HAL_PCD_EP_Receive>
 800637c:	4603      	mov	r3, r0
 800637e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f832 	bl	80063ec <USBD_Get_USB_Status>
 8006388:	4603      	mov	r3, r0
 800638a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800638c:	7dbb      	ldrb	r3, [r7, #22]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fb fb77 	bl	8001aa0 <HAL_PCD_EP_GetRxCount>
 80063b2:	4603      	mov	r3, r0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <USBD_static_malloc+0x18>)
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	200001a0 	.word	0x200001a0

080063d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d817      	bhi.n	8006430 <USBD_Get_USB_Status+0x44>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <USBD_Get_USB_Status+0x1c>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	08006419 	.word	0x08006419
 800640c:	0800641f 	.word	0x0800641f
 8006410:	08006425 	.word	0x08006425
 8006414:	0800642b 	.word	0x0800642b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]
    break;
 800641c:	e00b      	b.n	8006436 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800641e:	2303      	movs	r3, #3
 8006420:	73fb      	strb	r3, [r7, #15]
    break;
 8006422:	e008      	b.n	8006436 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
    break;
 8006428:	e005      	b.n	8006436 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800642a:	2303      	movs	r3, #3
 800642c:	73fb      	strb	r3, [r7, #15]
    break;
 800642e:	e002      	b.n	8006436 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	73fb      	strb	r3, [r7, #15]
    break;
 8006434:	bf00      	nop
  }
  return usb_status;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <main>:




int main(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  bspInit();
 8006448:	f7fa f84c 	bl	80004e4 <bspInit>
  {

    //ledToggle(0);
    //ledToggle(1);
    //delay(1000);
    CDC_Transmit_HS("hello\n", 7);
 800644c:	2107      	movs	r1, #7
 800644e:	4804      	ldr	r0, [pc, #16]	; (8006460 <main+0x1c>)
 8006450:	f7ff fb9a 	bl	8005b88 <CDC_Transmit_HS>
    delay(1000);
 8006454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006458:	f7fa f88c 	bl	8000574 <delay>
    CDC_Transmit_HS("hello\n", 7);
 800645c:	e7f6      	b.n	800644c <main+0x8>
 800645e:	bf00      	nop
 8006460:	0800651c 	.word	0x0800651c

08006464 <__libc_init_array>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4d0d      	ldr	r5, [pc, #52]	; (800649c <__libc_init_array+0x38>)
 8006468:	4c0d      	ldr	r4, [pc, #52]	; (80064a0 <__libc_init_array+0x3c>)
 800646a:	1b64      	subs	r4, r4, r5
 800646c:	10a4      	asrs	r4, r4, #2
 800646e:	2600      	movs	r6, #0
 8006470:	42a6      	cmp	r6, r4
 8006472:	d109      	bne.n	8006488 <__libc_init_array+0x24>
 8006474:	4d0b      	ldr	r5, [pc, #44]	; (80064a4 <__libc_init_array+0x40>)
 8006476:	4c0c      	ldr	r4, [pc, #48]	; (80064a8 <__libc_init_array+0x44>)
 8006478:	f000 f820 	bl	80064bc <_init>
 800647c:	1b64      	subs	r4, r4, r5
 800647e:	10a4      	asrs	r4, r4, #2
 8006480:	2600      	movs	r6, #0
 8006482:	42a6      	cmp	r6, r4
 8006484:	d105      	bne.n	8006492 <__libc_init_array+0x2e>
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	f855 3b04 	ldr.w	r3, [r5], #4
 800648c:	4798      	blx	r3
 800648e:	3601      	adds	r6, #1
 8006490:	e7ee      	b.n	8006470 <__libc_init_array+0xc>
 8006492:	f855 3b04 	ldr.w	r3, [r5], #4
 8006496:	4798      	blx	r3
 8006498:	3601      	adds	r6, #1
 800649a:	e7f2      	b.n	8006482 <__libc_init_array+0x1e>
 800649c:	0800653c 	.word	0x0800653c
 80064a0:	0800653c 	.word	0x0800653c
 80064a4:	0800653c 	.word	0x0800653c
 80064a8:	08006540 	.word	0x08006540

080064ac <memset>:
 80064ac:	4402      	add	r2, r0
 80064ae:	4603      	mov	r3, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d100      	bne.n	80064b6 <memset+0xa>
 80064b4:	4770      	bx	lr
 80064b6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ba:	e7f9      	b.n	80064b0 <memset+0x4>

080064bc <_init>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr

080064c8 <_fini>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr
