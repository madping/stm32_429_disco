
stm32429disco_my.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c0  080065c0  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c8  080065c8  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c8  080065c8  000165c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065cc  080065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080065d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000188  08006758  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  08006758  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af40  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003225  00000000  00000000  0003b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0003e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0003ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c3a  00000000  00000000  0003f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c03  00000000  00000000  000664e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6d67  00000000  00000000  000790e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fe4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c90  00000000  00000000  0014fea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000188 	.word	0x20000188
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006550 	.word	0x08006550

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000018c 	.word	0x2000018c
 80001e8:	08006550 	.word	0x08006550

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ea:	f000 f9d1 	bl	8000890 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f849 	bl	8000584 <SystemClock_Config>

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <bspInit+0x70>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <bspInit+0x70>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <bspInit+0x70>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <bspInit+0x70>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <bspInit+0x70>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <bspInit+0x70>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <bspInit+0x70>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <bspInit+0x70>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <bspInit+0x70>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  //__HAL_RCC_GPIOG_CLK_ENABLE();

  //MX_GPIO_Init();
  MX_USB_DEVICE_Init();
 8000546:	f005 fad3 	bl	8005af0 <MX_USB_DEVICE_Init>
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800

08000558 <delay>:



void delay(uint32_t ms)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000560:	f000 f9fc 	bl	800095c <HAL_GetTick>
 8000564:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < ms){}
 8000566:	bf00      	nop
 8000568:	f000 f9f8 	bl	800095c <HAL_GetTick>
 800056c:	4602      	mov	r2, r0
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	d8f7      	bhi.n	8000568 <delay+0x10>
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 ffd4 	bl	8006540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe4b 	bl	80022a4 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f820 	bl	8000658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f8ac 	bl	8002794 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f809 	bl	8000658 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_MspInit+0x4c>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <HAL_MspInit+0x4c>)
 8000674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_MspInit+0x4c>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_MspInit+0x4c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <MemManage_Handler+0x4>

080006c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <BusFault_Handler+0x4>

080006cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <UsageFault_Handler+0x4>

080006d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000700:	f000 f918 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <OTG_HS_IRQHandler+0x10>)
 800070e:	f000 fd96 	bl	800123e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000189c 	.word	0x2000189c

0800071c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000746:	490e      	ldr	r1, [pc, #56]	; (8000780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800075c:	4c0b      	ldr	r4, [pc, #44]	; (800078c <LoopFillZerobss+0x26>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800076a:	f7ff ffd7 	bl	800071c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f005 fec3 	bl	80064f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000772:	f005 feb3 	bl	80064dc <main>
  bx  lr    
 8000776:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000778:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000784:	080065d0 	.word	0x080065d0
  ldr r2, =_sbss
 8000788:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800078c:	20001ca4 	.word	0x20001ca4

08000790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC_IRQHandler>
	...

08000794 <ledInit>:
    };



bool ledInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  bool let = true;
 800079a:	2301      	movs	r3, #1
 800079c:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <ledInit+0x84>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4a18      	ldr	r2, [pc, #96]	; (8000818 <ledInit+0x84>)
 80007b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <ledInit+0x84>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]


  //HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  //GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  //HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);


  for(int i=0; i<=LED_MAX_CH; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	e016      	b.n	8000808 <ledInit+0x74>
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <ledInit+0x88>)
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4413      	add	r3, r2
 80007e2:	889b      	ldrh	r3, [r3, #4]
 80007e4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <ledInit+0x88>)
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007ee:	1d3a      	adds	r2, r7, #4
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f9f4 	bl	8000be0 <HAL_GPIO_Init>

    ledOff(i);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f80f 	bl	8000820 <ledOff>
  for(int i=0; i<=LED_MAX_CH; i++){
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3301      	adds	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	2b01      	cmp	r3, #1
 800080c:	dde5      	ble.n	80007da <ledInit+0x46>

  };

  return let;
 800080e:	7efb      	ldrb	r3, [r7, #27]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3720      	adds	r7, #32
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	20000004 	.word	0x20000004

08000820 <ledOff>:
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}


void ledOff(uint8_t ch)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  if(ch >= LED_MAX_CH) return;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d111      	bne.n	8000854 <ledOff+0x34>
  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ledOff+0x3c>)
 8000834:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <ledOff+0x3c>)
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	8899      	ldrh	r1, [r3, #4]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4a05      	ldr	r2, [pc, #20]	; (800085c <ledOff+0x3c>)
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4413      	add	r3, r2
 800084a:	79db      	ldrb	r3, [r3, #7]
 800084c:	461a      	mov	r2, r3
 800084e:	f000 fb73 	bl	8000f38 <HAL_GPIO_WritePin>
 8000852:	e000      	b.n	8000856 <ledOff+0x36>
  if(ch >= LED_MAX_CH) return;
 8000854:	bf00      	nop
}
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000004 	.word	0x20000004

08000860 <ledToggle>:


void ledToggle(uint8_t ch)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <ledToggle+0x2c>)
 800086e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4905      	ldr	r1, [pc, #20]	; (800088c <ledToggle+0x2c>)
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	440b      	add	r3, r1
 800087a:	889b      	ldrh	r3, [r3, #4]
 800087c:	4619      	mov	r1, r3
 800087e:	4610      	mov	r0, r2
 8000880:	f000 fb73 	bl	8000f6a <HAL_GPIO_TogglePin>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f94f 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fece 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f967 	bl	8000bc6 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f92f 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000010 	.word	0x20000010
 8000930:	2000000c 	.word	0x2000000c

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000010 	.word	0x20000010
 8000958:	200003c8 	.word	0x200003c8

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200003c8 	.word	0x200003c8

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000010 	.word	0x20000010

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff3e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff31 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e177      	b.n	8000eec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8166 	bne.w	8000ee6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80c0 	beq.w	8000ee6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <HAL_GPIO_Init+0x324>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a65      	ldr	r2, [pc, #404]	; (8000f04 <HAL_GPIO_Init+0x324>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b63      	ldr	r3, [pc, #396]	; (8000f04 <HAL_GPIO_Init+0x324>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a61      	ldr	r2, [pc, #388]	; (8000f08 <HAL_GPIO_Init+0x328>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a58      	ldr	r2, [pc, #352]	; (8000f0c <HAL_GPIO_Init+0x32c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d037      	beq.n	8000e1e <HAL_GPIO_Init+0x23e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a57      	ldr	r2, [pc, #348]	; (8000f10 <HAL_GPIO_Init+0x330>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d031      	beq.n	8000e1a <HAL_GPIO_Init+0x23a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a56      	ldr	r2, [pc, #344]	; (8000f14 <HAL_GPIO_Init+0x334>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d02b      	beq.n	8000e16 <HAL_GPIO_Init+0x236>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a55      	ldr	r2, [pc, #340]	; (8000f18 <HAL_GPIO_Init+0x338>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d025      	beq.n	8000e12 <HAL_GPIO_Init+0x232>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a54      	ldr	r2, [pc, #336]	; (8000f1c <HAL_GPIO_Init+0x33c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d01f      	beq.n	8000e0e <HAL_GPIO_Init+0x22e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a53      	ldr	r2, [pc, #332]	; (8000f20 <HAL_GPIO_Init+0x340>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x22a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <HAL_GPIO_Init+0x344>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a51      	ldr	r2, [pc, #324]	; (8000f28 <HAL_GPIO_Init+0x348>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x222>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <HAL_GPIO_Init+0x34c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x21e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <HAL_GPIO_Init+0x350>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000df6:	2309      	movs	r3, #9
 8000df8:	e012      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	e010      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000dfe:	2308      	movs	r3, #8
 8000e00:	e00e      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e02:	2307      	movs	r3, #7
 8000e04:	e00c      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e06:	2306      	movs	r3, #6
 8000e08:	e00a      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	e008      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e004      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e16:	2302      	movs	r3, #2
 8000e18:	e002      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x240>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	f002 0203 	and.w	r2, r2, #3
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	4093      	lsls	r3, r2
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e30:	4935      	ldr	r1, [pc, #212]	; (8000f08 <HAL_GPIO_Init+0x328>)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3e:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e62:	4a34      	ldr	r2, [pc, #208]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e8c:	4a29      	ldr	r2, [pc, #164]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_GPIO_Init+0x354>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	f67f ae84 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40021400 	.word	0x40021400
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40021c00 	.word	0x40021c00
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	40022400 	.word	0x40022400
 8000f34:	40013c00 	.word	0x40013c00

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f7c:	887a      	ldrh	r2, [r7, #2]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4013      	ands	r3, r2
 8000f82:	041a      	lsls	r2, r3, #16
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa0:	b08f      	sub	sp, #60	; 0x3c
 8000fa2:	af0a      	add	r7, sp, #40	; 0x28
 8000fa4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e10f      	b.n	80011d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f004 ff70 	bl	8005eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 feb9 	bl	8002d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	687e      	ldr	r6, [r7, #4]
 8000ffc:	466d      	mov	r5, sp
 8000ffe:	f106 0410 	add.w	r4, r6, #16
 8001002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800100a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800100e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001012:	1d33      	adds	r3, r6, #4
 8001014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	f001 fd90 	bl	8002b3c <USB_CoreInit>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2202      	movs	r2, #2
 8001026:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e0d0      	b.n	80011d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fea7 	bl	8002d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e04a      	b.n	80010d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	333d      	adds	r3, #61	; 0x3d
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	1a9b      	subs	r3, r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	333c      	adds	r3, #60	; 0x3c
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	b298      	uxth	r0, r3
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	3342      	adds	r3, #66	; 0x42
 800107c:	4602      	mov	r2, r0
 800107e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	1a9b      	subs	r3, r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	333f      	adds	r3, #63	; 0x3f
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3344      	adds	r3, #68	; 0x44
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3348      	adds	r3, #72	; 0x48
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	3350      	adds	r3, #80	; 0x50
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3af      	bcc.n	8001040 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e044      	b.n	8001170 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3b5      	bcc.n	80010e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	687e      	ldr	r6, [r7, #4]
 8001182:	466d      	mov	r5, sp
 8001184:	f106 0410 	add.w	r4, r6, #16
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001194:	e885 0003 	stmia.w	r5, {r0, r1}
 8001198:	1d33      	adds	r3, r6, #4
 800119a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	f001 fe3f 	bl	8002e20 <USB_DevInit>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00d      	b.n	80011d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 febb 	bl	8003f44 <USB_DevDisconnect>

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_PCD_Start+0x1c>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e020      	b.n	8001236 <HAL_PCD_Start+0x5e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	2b01      	cmp	r3, #1
 8001202:	d109      	bne.n	8001218 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001208:	2b01      	cmp	r3, #1
 800120a:	d005      	beq.n	8001218 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001210:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fd91 	bl	8002d44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fe6b 	bl	8003f02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b08d      	sub	sp, #52	; 0x34
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 ff29 	bl	80040ac <USB_GetMode>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	f040 839d 	bne.w	800199c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fe8d 	bl	8003f86 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8393 	beq.w	800199a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fe84 	bl	8003f86 <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d107      	bne.n	8001298 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f002 0202 	and.w	r2, r2, #2
 8001296:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fe72 	bl	8003f86 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d161      	bne.n	8001370 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0210 	bic.w	r2, r2, #16
 80012ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 020f 	and.w	r2, r3, #15
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	0c5b      	lsrs	r3, r3, #17
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d124      	bne.n	8001332 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d035      	beq.n	8001360 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f002 fca9 	bl	8003c5e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	441a      	add	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	e016      	b.n	8001360 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	0c5b      	lsrs	r3, r3, #17
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	2b06      	cmp	r3, #6
 800133c:	d110      	bne.n	8001360 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001344:	2208      	movs	r2, #8
 8001346:	4619      	mov	r1, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f002 fc88 	bl	8003c5e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	441a      	add	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0210 	orr.w	r2, r2, #16
 800136e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fe06 	bl	8003f86 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001380:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001384:	d16e      	bne.n	8001464 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fe0c 	bl	8003fac <USB_ReadDevAllOutEpInterrupt>
 8001394:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001396:	e062      	b.n	800145e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d057      	beq.n	8001452 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fe31 	bl	8004014 <USB_ReadDevOutEPInterrupt>
 80013b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00c      	beq.n	80013d8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	015a      	lsls	r2, r3, #5
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ca:	461a      	mov	r2, r3
 80013cc:	2301      	movs	r3, #1
 80013ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fdb0 	bl	8001f38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	015a      	lsls	r2, r3, #5
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ee:	461a      	mov	r2, r3
 80013f0:	2308      	movs	r3, #8
 80013f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 feaa 	bl	8002150 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2310      	movs	r3, #16
 8001416:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d008      	beq.n	8001434 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142e:	461a      	mov	r2, r3
 8001430:	2320      	movs	r3, #32
 8001432:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	3301      	adds	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d199      	bne.n	8001398 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fd8c 	bl	8003f86 <USB_ReadInterrupts>
 800146e:	4603      	mov	r3, r0
 8001470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001478:	f040 80c0 	bne.w	80015fc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fdad 	bl	8003fe0 <USB_ReadDevAllInEpInterrupt>
 8001486:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800148c:	e0b2      	b.n	80015f4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800148e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a7 	beq.w	80015e8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fdd3 	bl	8004050 <USB_ReadDevInEPInterrupt>
 80014aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d057      	beq.n	8001566 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	2201      	movs	r2, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69f9      	ldr	r1, [r7, #28]
 80014d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014d6:	4013      	ands	r3, r2
 80014d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e6:	461a      	mov	r2, r3
 80014e8:	2301      	movs	r3, #1
 80014ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d132      	bne.n	800155a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3348      	adds	r3, #72	; 0x48
 8001504:	6819      	ldr	r1, [r3, #0]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4403      	add	r3, r0
 8001514:	3344      	adds	r3, #68	; 0x44
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4419      	add	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	3348      	adds	r3, #72	; 0x48
 800152a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	2b00      	cmp	r3, #0
 8001530:	d113      	bne.n	800155a <HAL_PCD_IRQHandler+0x31c>
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3350      	adds	r3, #80	; 0x50
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d108      	bne.n	800155a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001552:	461a      	mov	r2, r3
 8001554:	2101      	movs	r1, #1
 8001556:	f002 fddb 	bl	8004110 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f004 fd22 	bl	8005faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157c:	461a      	mov	r2, r3
 800157e:	2308      	movs	r3, #8
 8001580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001598:	461a      	mov	r2, r3
 800159a:	2310      	movs	r3, #16
 800159c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b4:	461a      	mov	r2, r3
 80015b6:	2340      	movs	r3, #64	; 0x40
 80015b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d0:	461a      	mov	r2, r3
 80015d2:	2302      	movs	r3, #2
 80015d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fc1b 	bl	8001e1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3301      	adds	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f af49 	bne.w	800148e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fcc0 	bl	8003f86 <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800160c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001610:	d122      	bne.n	8001658 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fe26 	bl	800228c <HAL_PCDEx_LPM_Callback>
 8001640:	e002      	b.n	8001648 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f004 fd28 	bl	8006098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f002 fc92 	bl	8003f86 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800166c:	d112      	bne.n	8001694 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f004 fce4 	bl	800604c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001692:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fc74 	bl	8003f86 <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a8:	f040 80c7 	bne.w	800183a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2110      	movs	r1, #16
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 fd0e 	bl	80030e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d0:	e056      	b.n	8001780 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016de:	461a      	mov	r2, r3
 80016e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f6:	0151      	lsls	r1, r2, #5
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	440a      	add	r2, r1
 80016fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001704:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001716:	0151      	lsls	r1, r2, #5
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	440a      	add	r2, r1
 800171c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001720:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001724:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001732:	461a      	mov	r2, r3
 8001734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001738:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174a:	0151      	lsls	r1, r2, #5
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	440a      	add	r2, r1
 8001750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001754:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001758:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	015a      	lsls	r2, r3, #5
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176a:	0151      	lsls	r1, r2, #5
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	440a      	add	r2, r1
 8001770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001774:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001778:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	3301      	adds	r3, #1
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001786:	429a      	cmp	r2, r3
 8001788:	d3a3      	bcc.n	80016d2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001798:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800179c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d016      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b6:	f043 030b 	orr.w	r3, r3, #11
 80017ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017cc:	f043 030b 	orr.w	r3, r3, #11
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	e015      	b.n	8001800 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fa:	f043 030b 	orr.w	r3, r3, #11
 80017fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001812:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001824:	461a      	mov	r2, r3
 8001826:	f002 fc73 	bl	8004110 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f002 fba1 	bl	8003f86 <USB_ReadInterrupts>
 8001844:	4603      	mov	r3, r0
 8001846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800184e:	d124      	bne.n	800189a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fc37 	bl	80040c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fc9f 	bl	80031a2 <USB_GetDevSpeed>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681c      	ldr	r4, [r3, #0]
 8001870:	f001 f958 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8001874:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	4620      	mov	r0, r4
 8001880:	f001 f9be 	bl	8002c00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f004 fbb8 	bl	8005ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001898:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fb71 	bl	8003f86 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d10a      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f004 fb95 	bl	8005fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f002 0208 	and.w	r2, r2, #8
 80018c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fb5c 	bl	8003f86 <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d8:	d10f      	bne.n	80018fa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f004 fbf7 	bl	80060d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fb41 	bl	8003f86 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800190e:	d10f      	bne.n	8001930 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f004 fbca 	bl	80060b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800192e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 fb26 	bl	8003f86 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001944:	d10a      	bne.n	800195c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f004 fbd8 	bl	80060fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800195a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fb10 	bl	8003f86 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d115      	bne.n	800199c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f004 fbc8 	bl	8006118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	e000      	b.n	800199c <HAL_PCD_IRQHandler+0x75e>
      return;
 800199a:	bf00      	nop
    }
  }
}
 800199c:	3734      	adds	r7, #52	; 0x34
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}

080019a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_SetAddress+0x1a>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e013      	b.n	80019e4 <HAL_PCD_SetAddress+0x42>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fa6e 	bl	8003eb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	70fb      	strb	r3, [r7, #3]
 80019fe:	460b      	mov	r3, r1
 8001a00:	803b      	strh	r3, [r7, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da0f      	bge.n	8001a32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	3338      	adds	r3, #56	; 0x38
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	705a      	strb	r2, [r3, #1]
 8001a30:	e00f      	b.n	8001a52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 020f 	and.w	r2, r3, #15
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	3304      	adds	r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a5e:	883a      	ldrh	r2, [r7, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	78ba      	ldrb	r2, [r7, #2]
 8001a68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a7c:	78bb      	ldrb	r3, [r7, #2]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_PCD_EP_Open+0xaa>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e00e      	b.n	8001ab4 <HAL_PCD_EP_Open+0xc8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 fba1 	bl	80031ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da0f      	bge.n	8001af0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	705a      	strb	r2, [r3, #1]
 8001aee:	e00f      	b.n	8001b10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	3304      	adds	r3, #4
 8001b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_EP_Close+0x6e>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_Close+0x8c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 fbdf 	bl	80032fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	f001 feba 	bl	800393c <USB_EP0StartXfer>
 8001bc8:	e008      	b.n	8001bdc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	f001 fc6c 	bl	80034b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 020f 	and.w	r2, r3, #15
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c08:	681b      	ldr	r3, [r3, #0]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	460b      	mov	r3, r1
 8001c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3338      	adds	r3, #56	; 0x38
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2201      	movs	r2, #1
 8001c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	f001 fe58 	bl	800393c <USB_EP0StartXfer>
 8001c8c:	e008      	b.n	8001ca0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	f001 fc0a 	bl	80034b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d901      	bls.n	8001cc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e050      	b.n	8001d6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da0f      	bge.n	8001cf0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3338      	adds	r3, #56	; 0x38
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	705a      	strb	r2, [r3, #1]
 8001cee:	e00d      	b.n	8001d0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_EP_SetStall+0x82>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e01e      	b.n	8001d6a <HAL_PCD_EP_SetStall+0xc0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 ffe7 	bl	8003d0e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f002 f9d8 	bl	8004110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d901      	bls.n	8001d90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e042      	b.n	8001e16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0f      	bge.n	8001db8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3338      	adds	r3, #56	; 0x38
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	705a      	strb	r2, [r3, #1]
 8001db6:	e00f      	b.n	8001dd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_PCD_EP_ClrStall+0x86>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e00e      	b.n	8001e16 <HAL_PCD_EP_ClrStall+0xa4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 ffef 	bl	8003dea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b08a      	sub	sp, #40	; 0x28
 8001e22:	af02      	add	r7, sp, #8
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3338      	adds	r3, #56	; 0x38
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d901      	bls.n	8001e56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06c      	b.n	8001f30 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d902      	bls.n	8001e72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3303      	adds	r3, #3
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e7a:	e02b      	b.n	8001ed4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d902      	bls.n	8001e98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	3303      	adds	r3, #3
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68d9      	ldr	r1, [r3, #12]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f001 fe93 	bl	8003be2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	441a      	add	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	441a      	add	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d809      	bhi.n	8001efe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d203      	bcs.n	8001efe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1be      	bne.n	8001e7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d811      	bhi.n	8001f2e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	2201      	movs	r2, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	6939      	ldr	r1, [r7, #16]
 8001f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	333c      	adds	r3, #60	; 0x3c
 8001f50:	3304      	adds	r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 80a0 	bne.w	80020b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a72      	ldr	r2, [pc, #456]	; (8002148 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f240 80dd 	bls.w	800213e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80d7 	beq.w	800213e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	e0cb      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	6093      	str	r3, [r2, #8]
 8001fc2:	e0bc      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 80b7 	bne.w	800213e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d90f      	bls.n	8001ff8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e0a2      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800200a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	0159      	lsls	r1, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	440b      	add	r3, r1
 8002014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800201e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4403      	add	r3, r0
 800202e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002032:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002046:	6819      	ldr	r1, [r3, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4403      	add	r3, r0
 8002056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4419      	add	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4403      	add	r3, r0
 800206c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002070:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d114      	bne.n	80020a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d108      	bne.n	80020a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800209a:	461a      	mov	r2, r3
 800209c:	2101      	movs	r1, #1
 800209e:	f002 f837 	bl	8004110 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f003 ff63 	bl	8005f74 <HAL_PCD_DataOutStageCallback>
 80020ae:	e046      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a26      	ldr	r2, [pc, #152]	; (800214c <PCD_EP_OutXfrComplete_int+0x214>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d124      	bne.n	8002102 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ce:	461a      	mov	r2, r3
 80020d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	e032      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	2320      	movs	r3, #32
 80020f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f003 ff3a 	bl	8005f74 <HAL_PCD_DataOutStageCallback>
 8002100:	e01d      	b.n	800213e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d114      	bne.n	8002132 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212a:	461a      	mov	r2, r3
 800212c:	2100      	movs	r1, #0
 800212e:	f001 ffef 	bl	8004110 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f003 ff1b 	bl	8005f74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	4f54300a 	.word	0x4f54300a
 800214c:	4f54310a 	.word	0x4f54310a

08002150 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	333c      	adds	r3, #60	; 0x3c
 8002168:	3304      	adds	r3, #4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d90e      	bls.n	80021a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f003 fed3 	bl	8005f50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d90c      	bls.n	80021cc <PCD_EP_OutSetupPacket_int+0x7c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021c4:	461a      	mov	r2, r3
 80021c6:	2101      	movs	r1, #1
 80021c8:	f001 ffa2 	bl	8004110 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	4f54300a 	.word	0x4f54300a

080021dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
 80021e8:	4613      	mov	r3, r2
 80021ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021fa:	883b      	ldrh	r3, [r7, #0]
 80021fc:	0419      	lsls	r1, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	430a      	orrs	r2, r1
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
 8002208:	e028      	b.n	800225c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e00d      	b.n	800223a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	3340      	adds	r3, #64	; 0x40
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	3301      	adds	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	3b01      	subs	r3, #1
 8002240:	429a      	cmp	r2, r3
 8002242:	d3ec      	bcc.n	800221e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	0418      	lsls	r0, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	3b01      	subs	r3, #1
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	4302      	orrs	r2, r0
 8002254:	3340      	adds	r3, #64	; 0x40
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e264      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d075      	beq.n	80023ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4ba0      	ldr	r3, [pc, #640]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b99      	ldr	r3, [pc, #612]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d05b      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d157      	bne.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e23f      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x74>
 800230a:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a90      	ldr	r2, [pc, #576]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x98>
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8a      	ldr	r2, [pc, #552]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a87      	ldr	r2, [pc, #540]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
 800233c:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a83      	ldr	r2, [pc, #524]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a80      	ldr	r2, [pc, #512]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fafe 	bl	800095c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe fafa 	bl	800095c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e204      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xc0>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe faea 	bl	800095c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fae6 	bl	800095c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1f0      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0xe8>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c4      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b56      	ldr	r3, [pc, #344]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4952      	ldr	r1, [pc, #328]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <HAL_RCC_OscConfig+0x2b0>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fa9f 	bl	800095c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fa9b 	bl	800095c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a5      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4940      	ldr	r1, [pc, #256]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_OscConfig+0x2b0>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fa7e 	bl	800095c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fa7a 	bl	800095c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e184      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d030      	beq.n	80024f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_OscConfig+0x2b4>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fa5e 	bl	800095c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe fa5a 	bl	800095c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e164      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x200>
 80024c2:	e015      	b.n	80024f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x2b4>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fa47 	bl	800095c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fa43 	bl	800095c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e14d      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a0 	beq.w	800263e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d121      	bne.n	800257e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7fe fa09 	bl	800095c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e011      	b.n	8002572 <HAL_RCC_OscConfig+0x2ce>
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	42470000 	.word	0x42470000
 8002558:	42470e80 	.word	0x42470e80
 800255c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7fe f9fc 	bl	800095c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e106      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b85      	ldr	r3, [pc, #532]	; (8002788 <HAL_RCC_OscConfig+0x4e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x2f0>
 8002586:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	e01c      	b.n	80025ce <HAL_RCC_OscConfig+0x32a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b05      	cmp	r3, #5
 800259a:	d10c      	bne.n	80025b6 <HAL_RCC_OscConfig+0x312>
 800259c:	4b7b      	ldr	r3, [pc, #492]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a7a      	ldr	r2, [pc, #488]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	4b78      	ldr	r3, [pc, #480]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a77      	ldr	r2, [pc, #476]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0x32a>
 80025b6:	4b75      	ldr	r3, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a74      	ldr	r2, [pc, #464]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	4b72      	ldr	r3, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a71      	ldr	r2, [pc, #452]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d015      	beq.n	8002602 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe f9c1 	bl	800095c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe f9bd 	bl	800095c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0c5      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ee      	beq.n	80025de <HAL_RCC_OscConfig+0x33a>
 8002600:	e014      	b.n	800262c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe f9ab 	bl	800095c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe f9a7 	bl	800095c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0af      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ee      	bne.n	800260a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d105      	bne.n	800263e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a55      	ldr	r2, [pc, #340]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 809b 	beq.w	800277e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d05c      	beq.n	800270e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d141      	bne.n	80026e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b4c      	ldr	r3, [pc, #304]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7fe f97b 	bl	800095c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe f977 	bl	800095c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e081      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	4937      	ldr	r1, [pc, #220]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe f950 	bl	800095c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe f94c 	bl	800095c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e056      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b2e      	ldr	r3, [pc, #184]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x41c>
 80026de:	e04e      	b.n	800277e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_RCC_OscConfig+0x4ec>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe f939 	bl	800095c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe f935 	bl	800095c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e03f      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x44a>
 800270c:	e037      	b.n	800277e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e032      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_RCC_OscConfig+0x4e8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d028      	beq.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d121      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d11a      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002750:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002752:	4293      	cmp	r3, r2
 8002754:	d111      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002766:	429a      	cmp	r2, r3
 8002768:	d107      	bne.n	800277a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40007000 	.word	0x40007000
 800278c:	40023800 	.word	0x40023800
 8002790:	42470060 	.word	0x42470060

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cc      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d90c      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d044      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e067      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4934      	ldr	r1, [pc, #208]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe f86a 	bl	800095c <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe f866 	bl	800095c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d20c      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f821 	bl	8002960 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd ffca 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	080065b0 	.word	0x080065b0
 8002958:	20000000 	.word	0x20000000
 800295c:	2000000c 	.word	0x2000000c

08002960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	2300      	movs	r3, #0
 8002972:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002978:	4b67      	ldr	r3, [pc, #412]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00d      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002984:	2b08      	cmp	r3, #8
 8002986:	f200 80bd 	bhi.w	8002b04 <HAL_RCC_GetSysClockFreq+0x1a4>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x34>
 800298e:	2b04      	cmp	r3, #4
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x3a>
 8002992:	e0b7      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002996:	60bb      	str	r3, [r7, #8]
       break;
 8002998:	e0b7      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299a:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800299c:	60bb      	str	r3, [r7, #8]
      break;
 800299e:	e0b4      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029aa:	4b5b      	ldr	r3, [pc, #364]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04d      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	461a      	mov	r2, r3
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	ea02 0800 	and.w	r8, r2, r0
 80029ce:	ea03 0901 	and.w	r9, r3, r1
 80029d2:	4640      	mov	r0, r8
 80029d4:	4649      	mov	r1, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	014b      	lsls	r3, r1, #5
 80029e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029e4:	0142      	lsls	r2, r0, #5
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	ebb0 0008 	subs.w	r0, r0, r8
 80029ee:	eb61 0109 	sbc.w	r1, r1, r9
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a00:	0182      	lsls	r2, r0, #6
 8002a02:	1a12      	subs	r2, r2, r0
 8002a04:	eb63 0301 	sbc.w	r3, r3, r1
 8002a08:	f04f 0000 	mov.w	r0, #0
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	00d9      	lsls	r1, r3, #3
 8002a12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a16:	00d0      	lsls	r0, r2, #3
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	eb12 0208 	adds.w	r2, r2, r8
 8002a20:	eb43 0309 	adc.w	r3, r3, r9
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	0259      	lsls	r1, r3, #9
 8002a2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a32:	0250      	lsls	r0, r2, #9
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f7fd fbd2 	bl	80001ec <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e04a      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	461a      	mov	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	ea02 0400 	and.w	r4, r2, r0
 8002a6a:	ea03 0501 	and.w	r5, r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	014b      	lsls	r3, r1, #5
 8002a7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a80:	0142      	lsls	r2, r0, #5
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	1b00      	subs	r0, r0, r4
 8002a88:	eb61 0105 	sbc.w	r1, r1, r5
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	018b      	lsls	r3, r1, #6
 8002a96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a9a:	0182      	lsls	r2, r0, #6
 8002a9c:	1a12      	subs	r2, r2, r0
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	00d9      	lsls	r1, r3, #3
 8002aac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab0:	00d0      	lsls	r0, r2, #3
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	1912      	adds	r2, r2, r4
 8002ab8:	eb45 0303 	adc.w	r3, r5, r3
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0299      	lsls	r1, r3, #10
 8002ac6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aca:	0290      	lsls	r0, r2, #10
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f7fd fb86 	bl	80001ec <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	60bb      	str	r3, [r7, #8]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b06:	60bb      	str	r3, [r7, #8]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	f107 001c 	add.w	r0, r7, #28
 8002b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d122      	bne.n	8002b9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f001 fb1c 	bl	80041cc <USB_CoreReset>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e01a      	b.n	8002bd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f001 fb10 	bl	80041cc <USB_CoreReset>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc2:	e005      	b.n	8002bd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10b      	bne.n	8002bee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f043 0206 	orr.w	r2, r3, #6
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bfa:	b004      	add	sp, #16
 8002bfc:	4770      	bx	lr
	...

08002c00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d165      	bne.n	8002ce0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a41      	ldr	r2, [pc, #260]	; (8002d1c <USB_SetTurnaroundTime+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d906      	bls.n	8002c2a <USB_SetTurnaroundTime+0x2a>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4a40      	ldr	r2, [pc, #256]	; (8002d20 <USB_SetTurnaroundTime+0x120>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d202      	bcs.n	8002c2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c24:	230f      	movs	r3, #15
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e062      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4a3c      	ldr	r2, [pc, #240]	; (8002d20 <USB_SetTurnaroundTime+0x120>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d306      	bcc.n	8002c40 <USB_SetTurnaroundTime+0x40>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4a3b      	ldr	r2, [pc, #236]	; (8002d24 <USB_SetTurnaroundTime+0x124>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d202      	bcs.n	8002c40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c3a:	230e      	movs	r3, #14
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e057      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <USB_SetTurnaroundTime+0x124>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d306      	bcc.n	8002c56 <USB_SetTurnaroundTime+0x56>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <USB_SetTurnaroundTime+0x128>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d202      	bcs.n	8002c56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c50:	230d      	movs	r3, #13
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e04c      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <USB_SetTurnaroundTime+0x128>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d306      	bcc.n	8002c6c <USB_SetTurnaroundTime+0x6c>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a32      	ldr	r2, [pc, #200]	; (8002d2c <USB_SetTurnaroundTime+0x12c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c66:	230c      	movs	r3, #12
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e041      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <USB_SetTurnaroundTime+0x12c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d906      	bls.n	8002c82 <USB_SetTurnaroundTime+0x82>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <USB_SetTurnaroundTime+0x130>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d802      	bhi.n	8002c82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c7c:	230b      	movs	r3, #11
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e036      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <USB_SetTurnaroundTime+0x130>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d906      	bls.n	8002c98 <USB_SetTurnaroundTime+0x98>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a29      	ldr	r2, [pc, #164]	; (8002d34 <USB_SetTurnaroundTime+0x134>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c92:	230a      	movs	r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e02b      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <USB_SetTurnaroundTime+0x134>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d906      	bls.n	8002cae <USB_SetTurnaroundTime+0xae>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a25      	ldr	r2, [pc, #148]	; (8002d38 <USB_SetTurnaroundTime+0x138>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d202      	bcs.n	8002cae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ca8:	2309      	movs	r3, #9
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e020      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <USB_SetTurnaroundTime+0x138>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d306      	bcc.n	8002cc4 <USB_SetTurnaroundTime+0xc4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <USB_SetTurnaroundTime+0x13c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e015      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <USB_SetTurnaroundTime+0x13c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d906      	bls.n	8002cda <USB_SetTurnaroundTime+0xda>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <USB_SetTurnaroundTime+0x140>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d202      	bcs.n	8002cda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e00a      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cda:	2306      	movs	r3, #6
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e007      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e001      	b.n	8002cf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cec:	2309      	movs	r3, #9
 8002cee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	00d8acbf 	.word	0x00d8acbf
 8002d20:	00e4e1c0 	.word	0x00e4e1c0
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	01067380 	.word	0x01067380
 8002d2c:	011a499f 	.word	0x011a499f
 8002d30:	01312cff 	.word	0x01312cff
 8002d34:	014ca43f 	.word	0x014ca43f
 8002d38:	016e3600 	.word	0x016e3600
 8002d3c:	01a6ab1f 	.word	0x01a6ab1f
 8002d40:	01e84800 	.word	0x01e84800

08002d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d115      	bne.n	8002dd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fd fddc 	bl	8000974 <HAL_Delay>
      ms++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 f972 	bl	80040ac <USB_GetMode>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d01e      	beq.n	8002e0c <USB_SetCurrentMode+0x84>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b31      	cmp	r3, #49	; 0x31
 8002dd2:	d9f0      	bls.n	8002db6 <USB_SetCurrentMode+0x2e>
 8002dd4:	e01a      	b.n	8002e0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d115      	bne.n	8002e08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7fd fdc3 	bl	8000974 <HAL_Delay>
      ms++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	3301      	adds	r3, #1
 8002df2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 f959 	bl	80040ac <USB_GetMode>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <USB_SetCurrentMode+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b31      	cmp	r3, #49	; 0x31
 8002e04:	d9f0      	bls.n	8002de8 <USB_SetCurrentMode+0x60>
 8002e06:	e001      	b.n	8002e0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e005      	b.n	8002e18 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b32      	cmp	r3, #50	; 0x32
 8002e10:	d101      	bne.n	8002e16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e20:	b084      	sub	sp, #16
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e009      	b.n	8002e54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	3340      	adds	r3, #64	; 0x40
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	3301      	adds	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b0e      	cmp	r3, #14
 8002e58:	d9f2      	bls.n	8002e40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11c      	bne.n	8002e9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
 8002e98:	e00b      	b.n	8002eb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ecc:	461a      	mov	r2, r3
 8002ece:	680b      	ldr	r3, [r1, #0]
 8002ed0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ede:	2100      	movs	r1, #0
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f945 	bl	8003170 <USB_SetDevSpeed>
 8002ee6:	e008      	b.n	8002efa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f940 	bl	8003170 <USB_SetDevSpeed>
 8002ef0:	e003      	b.n	8002efa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f93b 	bl	8003170 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002efa:	2110      	movs	r1, #16
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8f3 	bl	80030e8 <USB_FlushTxFifo>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f90f 	bl	8003130 <USB_FlushRxFifo>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f22:	461a      	mov	r2, r3
 8002f24:	2300      	movs	r3, #0
 8002f26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2300      	movs	r3, #0
 8002f32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e043      	b.n	8002fce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f5c:	d118      	bne.n	8002f90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f70:	461a      	mov	r2, r3
 8002f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e013      	b.n	8002fa2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f86:	461a      	mov	r2, r3
 8002f88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e008      	b.n	8002fa2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b7      	bcc.n	8002f46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	e043      	b.n	8003064 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff2:	d118      	bne.n	8003026 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e013      	b.n	8003038 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e008      	b.n	8003038 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003032:	461a      	mov	r2, r3
 8003034:	2300      	movs	r3, #0
 8003036:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	2300      	movs	r3, #0
 8003048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800305c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	3301      	adds	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	429a      	cmp	r2, r3
 800306a:	d3b7      	bcc.n	8002fdc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800308c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <USB_DevInit+0x2c4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f043 0208 	orr.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d107      	bne.n	80030d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030e0:	b004      	add	sp, #16
 80030e2:	4770      	bx	lr
 80030e4:	803c3800 	.word	0x803c3800

080030e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	019b      	lsls	r3, r3, #6
 80030fa:	f043 0220 	orr.w	r2, r3, #32
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3301      	adds	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <USB_FlushTxFifo+0x44>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e006      	b.n	8003120 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	d0f1      	beq.n	8003102 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	00030d40 	.word	0x00030d40

08003130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2210      	movs	r2, #16
 8003140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	4a08      	ldr	r2, [pc, #32]	; (800316c <USB_FlushRxFifo+0x3c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e006      	b.n	8003160 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d0f1      	beq.n	8003142 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	00030d40 	.word	0x00030d40

08003170 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0306 	and.w	r3, r3, #6
 80031ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]
 80031c6:	e00a      	b.n	80031de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d002      	beq.n	80031d4 <USB_GetDevSpeed+0x32>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b06      	cmp	r3, #6
 80031d2:	d102      	bne.n	80031da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80031d4:	2302      	movs	r3, #2
 80031d6:	75fb      	strb	r3, [r7, #23]
 80031d8:	e001      	b.n	80031de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80031da:	230f      	movs	r3, #15
 80031dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d13a      	bne.n	800327e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	b29b      	uxth	r3, r3
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003226:	4313      	orrs	r3, r2
 8003228:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d155      	bne.n	80032ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	78db      	ldrb	r3, [r3, #3]
 800325a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800325c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	059b      	lsls	r3, r3, #22
 8003262:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003264:	4313      	orrs	r3, r2
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	440a      	add	r2, r1
 800326e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	e036      	b.n	80032ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	041b      	lsls	r3, r3, #16
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329c:	4313      	orrs	r3, r2
 800329e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11a      	bne.n	80032ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032d2:	430b      	orrs	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d161      	bne.n	80033dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800332a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800332e:	d11f      	bne.n	8003370 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	440a      	add	r2, r1
 8003346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800334a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800334e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800336a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800336e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2101      	movs	r1, #1
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	b29b      	uxth	r3, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003390:	4013      	ands	r3, r2
 8003392:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	2101      	movs	r1, #1
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b4:	4013      	ands	r3, r2
 80033b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d2:	4619      	mov	r1, r3
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <USB_DeactivateEndpoint+0x1b0>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
 80033da:	e060      	b.n	800349e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f2:	d11f      	bne.n	8003434 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800340e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003412:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	440a      	add	r2, r1
 800342a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800342e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	43db      	mvns	r3, r3
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003454:	4013      	ands	r3, r2
 8003456:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	43db      	mvns	r3, r3
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003478:	4013      	ands	r3, r2
 800347a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4413      	add	r3, r2
 8003484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0159      	lsls	r1, r3, #5
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	440b      	add	r3, r1
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	4619      	mov	r1, r3
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <USB_DeactivateEndpoint+0x1b4>)
 800349a:	4013      	ands	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	ec337800 	.word	0xec337800
 80034b0:	eff37800 	.word	0xeff37800

080034b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	4613      	mov	r3, r2
 80034c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 815c 	bne.w	800378e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d132      	bne.n	8003544 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	0151      	lsls	r1, r2, #5
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	440a      	add	r2, r1
 80034f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	0151      	lsls	r1, r2, #5
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	440a      	add	r2, r1
 8003518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800351c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	0151      	lsls	r1, r2, #5
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	440a      	add	r2, r1
 8003538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353c:	0cdb      	lsrs	r3, r3, #19
 800353e:	04db      	lsls	r3, r3, #19
 8003540:	6113      	str	r3, [r2, #16]
 8003542:	e074      	b.n	800362e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	0151      	lsls	r1, r2, #5
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	440a      	add	r2, r1
 800355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355e:	0cdb      	lsrs	r3, r3, #19
 8003560:	04db      	lsls	r3, r3, #19
 8003562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6959      	ldr	r1, [r3, #20]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	440b      	add	r3, r1
 80035a0:	1e59      	subs	r1, r3, #1
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035ac:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <USB_EPStartXfer+0x370>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	0148      	lsls	r0, r1, #5
 80035b4:	69f9      	ldr	r1, [r7, #28]
 80035b6:	4401      	add	r1, r0
 80035b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035bc:	4313      	orrs	r3, r2
 80035be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d6:	69b9      	ldr	r1, [r7, #24]
 80035d8:	0148      	lsls	r0, r1, #5
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	4401      	add	r1, r0
 80035de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	78db      	ldrb	r3, [r3, #3]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d11f      	bne.n	800362e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003608:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800360c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800362c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d14b      	bne.n	80036cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d128      	bne.n	80036aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d110      	bne.n	800368a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003682:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e00f      	b.n	80036aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e12f      	b.n	800392c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80036ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	78db      	ldrb	r3, [r3, #3]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d015      	beq.n	8003720 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8117 	beq.w	800392c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f303 	lsl.w	r3, r1, r3
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800371a:	4313      	orrs	r3, r2
 800371c:	634b      	str	r3, [r1, #52]	; 0x34
 800371e:	e105      	b.n	800392c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d110      	bne.n	8003752 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	0151      	lsls	r1, r2, #5
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	440a      	add	r2, r1
 8003746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800374a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e00f      	b.n	8003772 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	0151      	lsls	r1, r2, #5
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	440a      	add	r2, r1
 8003768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	b298      	uxth	r0, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	4603      	mov	r3, r0
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa2b 	bl	8003be2 <USB_WritePacket>
 800378c:	e0ce      	b.n	800392c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a8:	0cdb      	lsrs	r3, r3, #19
 80037aa:	04db      	lsls	r3, r3, #19
 80037ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d126      	bne.n	8003828 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	0148      	lsls	r0, r1, #5
 80037f4:	69f9      	ldr	r1, [r7, #28]
 80037f6:	4401      	add	r1, r0
 80037f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800381a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800381e:	6113      	str	r3, [r2, #16]
 8003820:	e036      	b.n	8003890 <USB_EPStartXfer+0x3dc>
 8003822:	bf00      	nop
 8003824:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4413      	add	r3, r2
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	8afb      	ldrh	r3, [r7, #22]
 800384e:	04d9      	lsls	r1, r3, #19
 8003850:	4b39      	ldr	r3, [pc, #228]	; (8003938 <USB_EPStartXfer+0x484>)
 8003852:	400b      	ands	r3, r1
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	0148      	lsls	r0, r1, #5
 8003858:	69f9      	ldr	r1, [r7, #28]
 800385a:	4401      	add	r1, r0
 800385c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	8af9      	ldrh	r1, [r7, #22]
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	0148      	lsls	r0, r1, #5
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	4401      	add	r1, r0
 8003888:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800388c:	4313      	orrs	r3, r2
 800388e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d10d      	bne.n	80038b2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	68d9      	ldr	r1, [r3, #12]
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	460a      	mov	r2, r1
 80038b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	78db      	ldrb	r3, [r3, #3]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d128      	bne.n	800390c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d110      	bne.n	80038ec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e00f      	b.n	800390c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	440a      	add	r2, r1
 8003922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003926:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800392a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	1ff80000 	.word	0x1ff80000

0800393c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 80cd 	bne.w	8003af8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d132      	bne.n	80039cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003980:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003984:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003988:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039c4:	0cdb      	lsrs	r3, r3, #19
 80039c6:	04db      	lsls	r3, r3, #19
 80039c8:	6113      	str	r3, [r2, #16]
 80039ca:	e04e      	b.n	8003a6a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e6:	0cdb      	lsrs	r3, r3, #19
 80039e8:	04db      	lsls	r3, r3, #19
 80039ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d903      	bls.n	8003a24 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	0148      	lsls	r0, r1, #5
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	4401      	add	r1, r0
 8003a62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a66:	4313      	orrs	r3, r2
 8003a68:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d11e      	bne.n	8003aae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	0151      	lsls	r1, r2, #5
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	440a      	add	r2, r1
 8003aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e092      	b.n	8003bd4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	0151      	lsls	r1, r2, #5
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	440a      	add	r2, r1
 8003ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003acc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d07e      	beq.n	8003bd4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	6979      	ldr	r1, [r7, #20]
 8003aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af2:	4313      	orrs	r3, r2
 8003af4:	634b      	str	r3, [r1, #52]	; 0x34
 8003af6:	e06d      	b.n	8003bd4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	0151      	lsls	r1, r2, #5
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	440a      	add	r2, r1
 8003b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b12:	0cdb      	lsrs	r3, r3, #19
 8003b14:	04db      	lsls	r3, r3, #19
 8003b16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b3a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	6939      	ldr	r1, [r7, #16]
 8003b84:	0148      	lsls	r0, r1, #5
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	4401      	add	r1, r0
 8003b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10d      	bne.n	8003bb4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	68d9      	ldr	r1, [r3, #12]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b089      	sub	sp, #36	; 0x24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	4611      	mov	r1, r2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	71fb      	strb	r3, [r7, #7]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d123      	bne.n	8003c50 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c08:	88bb      	ldrh	r3, [r7, #4]
 8003c0a:	3303      	adds	r3, #3
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e018      	b.n	8003c48 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	031a      	lsls	r2, r3, #12
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c22:	461a      	mov	r2, r3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3e2      	bcc.n	8003c16 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b08b      	sub	sp, #44	; 0x2c
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	e014      	b.n	8003cb4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	3301      	adds	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	3301      	adds	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3e6      	bcc.n	8003c8a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cbc:	8bfb      	ldrh	r3, [r7, #30]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01e      	beq.n	8003d00 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	701a      	strb	r2, [r3, #0]
      i++;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	3301      	adds	r3, #1
 8003cec:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003cf4:	8bfb      	ldrh	r3, [r7, #30]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cfa:	8bfb      	ldrh	r3, [r7, #30]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ea      	bne.n	8003cd6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	372c      	adds	r7, #44	; 0x2c
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d12c      	bne.n	8003d84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db12      	blt.n	8003d62 <USB_EPSetStall+0x54>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00f      	beq.n	8003d62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	0151      	lsls	r1, r2, #5
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	440a      	add	r2, r1
 8003d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e02b      	b.n	8003ddc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db12      	blt.n	8003dbc <USB_EPSetStall+0xae>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00f      	beq.n	8003dbc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	785b      	ldrb	r3, [r3, #1]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d128      	bne.n	8003e58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	78db      	ldrb	r3, [r3, #3]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d003      	beq.n	8003e36 <USB_EPClearStall+0x4c>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	78db      	ldrb	r3, [r3, #3]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d138      	bne.n	8003ea8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e027      	b.n	8003ea8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	78db      	ldrb	r3, [r3, #3]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d003      	beq.n	8003e88 <USB_EPClearStall+0x9e>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	78db      	ldrb	r3, [r3, #3]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d10f      	bne.n	8003ea8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	0151      	lsls	r1, r2, #5
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	440a      	add	r2, r1
 8003e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ed8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f1c:	f023 0303 	bic.w	r3, r3, #3
 8003f20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f30:	f023 0302 	bic.w	r3, r3, #2
 8003f34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	0c1b      	lsrs	r3, r3, #16
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	b29b      	uxth	r3, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004042:	68bb      	ldr	r3, [r7, #8]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	01db      	lsls	r3, r3, #7
 8004082:	b2db      	uxtb	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800409e:	68bb      	ldr	r3, [r7, #8]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f003 0301 	and.w	r3, r3, #1
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	460b      	mov	r3, r1
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	333c      	adds	r3, #60	; 0x3c
 8004126:	3304      	adds	r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <USB_EP0_OutStart+0xb8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d90a      	bls.n	800414a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d101      	bne.n	800414a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e037      	b.n	80041ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	f043 0318 	orr.w	r3, r3, #24
 800417c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004190:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10f      	bne.n	80041b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80041b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	4f54300a 	.word	0x4f54300a

080041cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	4a13      	ldr	r2, [pc, #76]	; (800422c <USB_CoreReset+0x60>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e01a      	b.n	800421e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	daf3      	bge.n	80041d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <USB_CoreReset+0x60>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d901      	bls.n	8004210 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d0f1      	beq.n	8004200 <USB_CoreReset+0x34>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	00030d40 	.word	0x00030d40

08004230 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800423c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004240:	f002 f908 	bl	8006454 <USBD_static_malloc>
 8004244:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004254:	2302      	movs	r3, #2
 8004256:	e066      	b.n	8004326 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7c1b      	ldrb	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d119      	bne.n	800429c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800426c:	2202      	movs	r2, #2
 800426e:	2181      	movs	r1, #129	; 0x81
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 ffcc 	bl	800620e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800427c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004280:	2202      	movs	r2, #2
 8004282:	2101      	movs	r1, #1
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 ffc2 	bl	800620e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2210      	movs	r2, #16
 8004296:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800429a:	e016      	b.n	80042ca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	2202      	movs	r2, #2
 80042a0:	2181      	movs	r1, #129	; 0x81
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 ffb3 	bl	800620e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	2202      	movs	r2, #2
 80042b2:	2101      	movs	r1, #1
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f001 ffaa 	bl	800620e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2210      	movs	r2, #16
 80042c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80042ca:	2308      	movs	r3, #8
 80042cc:	2203      	movs	r2, #3
 80042ce:	2182      	movs	r1, #130	; 0x82
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 ff9c 	bl	800620e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7c1b      	ldrb	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430a:	2101      	movs	r1, #1
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f002 f86d 	bl	80063ec <USBD_LL_PrepareReceive>
 8004312:	e007      	b.n	8004324 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	2101      	movs	r1, #1
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f002 f864 	bl	80063ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800433a:	2181      	movs	r1, #129	; 0x81
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 ff8c 	bl	800625a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004348:	2101      	movs	r1, #1
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 ff85 	bl	800625a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004358:	2182      	movs	r1, #130	; 0x82
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 ff7d 	bl	800625a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00e      	beq.n	8004398 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800438a:	4618      	mov	r0, r3
 800438c:	f002 f870 	bl	8006470 <USBD_static_free>
    pdev->pClassData = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0af      	b.n	800452c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d03f      	beq.n	8004458 <USBD_CDC_Setup+0xb4>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	f040 809f 	bne.w	800451c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	88db      	ldrh	r3, [r3, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02e      	beq.n	8004444 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da16      	bge.n	800441e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80043fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	88d2      	ldrh	r2, [r2, #6]
 8004402:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	88db      	ldrh	r3, [r3, #6]
 8004408:	2b07      	cmp	r3, #7
 800440a:	bf28      	it	cs
 800440c:	2307      	movcs	r3, #7
 800440e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	89fa      	ldrh	r2, [r7, #14]
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 fae9 	bl	80059ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800441c:	e085      	b.n	800452a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	785a      	ldrb	r2, [r3, #1]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	88db      	ldrh	r3, [r3, #6]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004434:	6939      	ldr	r1, [r7, #16]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	88db      	ldrh	r3, [r3, #6]
 800443a:	461a      	mov	r2, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 fb02 	bl	8005a46 <USBD_CtlPrepareRx>
      break;
 8004442:	e072      	b.n	800452a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	7850      	ldrb	r0, [r2, #1]
 8004450:	2200      	movs	r2, #0
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	4798      	blx	r3
      break;
 8004456:	e068      	b.n	800452a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b0b      	cmp	r3, #11
 800445e:	d852      	bhi.n	8004506 <USBD_CDC_Setup+0x162>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <USBD_CDC_Setup+0xc4>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	08004499 	.word	0x08004499
 800446c:	08004515 	.word	0x08004515
 8004470:	08004507 	.word	0x08004507
 8004474:	08004507 	.word	0x08004507
 8004478:	08004507 	.word	0x08004507
 800447c:	08004507 	.word	0x08004507
 8004480:	08004507 	.word	0x08004507
 8004484:	08004507 	.word	0x08004507
 8004488:	08004507 	.word	0x08004507
 800448c:	08004507 	.word	0x08004507
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044ed 	.word	0x080044ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d107      	bne.n	80044b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80044a4:	f107 030a 	add.w	r3, r7, #10
 80044a8:	2202      	movs	r2, #2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 fa9e 	bl	80059ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044b2:	e032      	b.n	800451a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f001 fa28 	bl	800590c <USBD_CtlError>
            ret = USBD_FAIL;
 80044bc:	2303      	movs	r3, #3
 80044be:	75fb      	strb	r3, [r7, #23]
          break;
 80044c0:	e02b      	b.n	800451a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d107      	bne.n	80044de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80044ce:	f107 030d 	add.w	r3, r7, #13
 80044d2:	2201      	movs	r2, #1
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fa89 	bl	80059ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044dc:	e01d      	b.n	800451a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f001 fa13 	bl	800590c <USBD_CtlError>
            ret = USBD_FAIL;
 80044e6:	2303      	movs	r3, #3
 80044e8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ea:	e016      	b.n	800451a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d00f      	beq.n	8004518 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 fa06 	bl	800590c <USBD_CtlError>
            ret = USBD_FAIL;
 8004500:	2303      	movs	r3, #3
 8004502:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004504:	e008      	b.n	8004518 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 f9ff 	bl	800590c <USBD_CtlError>
          ret = USBD_FAIL;
 800450e:	2303      	movs	r3, #3
 8004510:	75fb      	strb	r3, [r7, #23]
          break;
 8004512:	e002      	b.n	800451a <USBD_CDC_Setup+0x176>
          break;
 8004514:	bf00      	nop
 8004516:	e008      	b.n	800452a <USBD_CDC_Setup+0x186>
          break;
 8004518:	bf00      	nop
      }
      break;
 800451a:	e006      	b.n	800452a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 f9f4 	bl	800590c <USBD_CtlError>
      ret = USBD_FAIL;
 8004524:	2303      	movs	r3, #3
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	bf00      	nop
  }

  return (uint8_t)ret;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004546:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004552:	2303      	movs	r3, #3
 8004554:	e04f      	b.n	80045f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800455c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3318      	adds	r3, #24
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d029      	beq.n	80045c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3318      	adds	r3, #24
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	78f9      	ldrb	r1, [r7, #3]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	460b      	mov	r3, r1
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	1a5b      	subs	r3, r3, r1
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4403      	add	r3, r0
 8004594:	3344      	adds	r3, #68	; 0x44
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	fbb2 f1f3 	udiv	r1, r2, r3
 800459c:	fb03 f301 	mul.w	r3, r3, r1
 80045a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d110      	bne.n	80045c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	3318      	adds	r3, #24
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80045ba:	78f9      	ldrb	r1, [r7, #3]
 80045bc:	2300      	movs	r3, #0
 80045be:	2200      	movs	r2, #0
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 fef2 	bl	80063aa <USBD_LL_Transmit>
 80045c6:	e015      	b.n	80045f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	460b      	mov	r3, r1
 8004608:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004610:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800461c:	2303      	movs	r3, #3
 800461e:	e015      	b.n	800464c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 ff02 	bl	800642e <USBD_LL_GetRxDataSize>
 800462a:	4602      	mov	r2, r0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004646:	4611      	mov	r1, r2
 8004648:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004662:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800466a:	2303      	movs	r3, #3
 800466c:	e01b      	b.n	80046a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <USBD_CDC_EP0_RxReady+0x50>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800467e:	2bff      	cmp	r3, #255	; 0xff
 8004680:	d010      	beq.n	80046a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004690:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004698:	b292      	uxth	r2, r2
 800469a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	22ff      	movs	r2, #255	; 0xff
 80046a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2243      	movs	r2, #67	; 0x43
 80046bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	2000009c 	.word	0x2000009c

080046d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2243      	movs	r2, #67	; 0x43
 80046dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000058 	.word	0x20000058

080046f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2243      	movs	r2, #67	; 0x43
 80046fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80046fe:	4b03      	ldr	r3, [pc, #12]	; (800470c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	200000e0 	.word	0x200000e0

08004710 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	220a      	movs	r2, #10
 800471c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800471e:	4b03      	ldr	r3, [pc, #12]	; (800472c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000014 	.word	0x20000014

08004730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004740:	2303      	movs	r3, #3
 8004742:	e004      	b.n	800474e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800475a:	b480      	push	{r7}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800476c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004774:	2303      	movs	r3, #3
 8004776:	e008      	b.n	800478a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e004      	b.n	80047bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e016      	b.n	8004814 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7c1b      	ldrb	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f8:	2101      	movs	r1, #1
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f001 fdf6 	bl	80063ec <USBD_LL_PrepareReceive>
 8004800:	e007      	b.n	8004812 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004808:	2340      	movs	r3, #64	; 0x40
 800480a:	2101      	movs	r1, #1
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 fded 	bl	80063ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004830:	2303      	movs	r3, #3
 8004832:	e01f      	b.n	8004874 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	79fa      	ldrb	r2, [r7, #7]
 8004866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f001 fc63 	bl	8006134 <USBD_LL_Init>
 800486e:	4603      	mov	r3, r0
 8004870:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004872:	7dfb      	ldrb	r3, [r7, #23]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004890:	2303      	movs	r3, #3
 8004892:	e016      	b.n	80048c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f107 020e 	add.w	r2, r7, #14
 80048b4:	4610      	mov	r0, r2
 80048b6:	4798      	blx	r3
 80048b8:	4602      	mov	r2, r0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 fc80 	bl	80061d8 <USBD_LL_Start>
 80048d8:	4603      	mov	r3, r0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004904:	2303      	movs	r3, #3
 8004906:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	4611      	mov	r1, r2
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
 8004922:	4603      	mov	r3, r0
 8004924:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	4611      	mov	r1, r2
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
  }

  return USBD_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 ff90 	bl	8005898 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	2b02      	cmp	r3, #2
 800499a:	d01a      	beq.n	80049d2 <USBD_LL_SetupStage+0x72>
 800499c:	2b02      	cmp	r3, #2
 800499e:	d822      	bhi.n	80049e6 <USBD_LL_SetupStage+0x86>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <USBD_LL_SetupStage+0x4a>
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d00a      	beq.n	80049be <USBD_LL_SetupStage+0x5e>
 80049a8:	e01d      	b.n	80049e6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa62 	bl	8004e7c <USBD_StdDevReq>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
      break;
 80049bc:	e020      	b.n	8004a00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fac6 	bl	8004f58 <USBD_StdItfReq>
 80049cc:	4603      	mov	r3, r0
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e016      	b.n	8004a00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fb05 	bl	8004fea <USBD_StdEPReq>
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
      break;
 80049e4:	e00c      	b.n	8004a00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80049ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fc4f 	bl	8006298 <USBD_LL_StallEP>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
      break;
 80049fe:	bf00      	nop
  }

  return ret;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	460b      	mov	r3, r1
 8004a14:	607a      	str	r2, [r7, #4]
 8004a16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d138      	bne.n	8004a90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004a24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d14a      	bne.n	8004ac6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d913      	bls.n	8004a64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	1ad2      	subs	r2, r2, r3
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	4293      	cmp	r3, r2
 8004a54:	bf28      	it	cs
 8004a56:	4613      	movcs	r3, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f001 f80f 	bl	8005a80 <USBD_CtlContinueRx>
 8004a62:	e030      	b.n	8004ac6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d10b      	bne.n	8004a88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f001 f80a 	bl	8005aa2 <USBD_CtlSendStatus>
 8004a8e:	e01a      	b.n	8004ac6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d114      	bne.n	8004ac6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	7afa      	ldrb	r2, [r7, #11]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	4798      	blx	r3
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	e000      	b.n	8004ac8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d16b      	bne.n	8004bbc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d156      	bne.n	8004ba2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d914      	bls.n	8004b2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	1ad2      	subs	r2, r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	461a      	mov	r2, r3
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 ff84 	bl	8005a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f001 fc62 	bl	80063ec <USBD_LL_PrepareReceive>
 8004b28:	e03b      	b.n	8004ba2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d11c      	bne.n	8004b70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d316      	bcc.n	8004b70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d20f      	bcs.n	8004b70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b50:	2200      	movs	r2, #0
 8004b52:	2100      	movs	r1, #0
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 ff65 	bl	8005a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b62:	2300      	movs	r3, #0
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f001 fc3f 	bl	80063ec <USBD_LL_PrepareReceive>
 8004b6e:	e018      	b.n	8004ba2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d10b      	bne.n	8004b94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b94:	2180      	movs	r1, #128	; 0x80
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f001 fb7e 	bl	8006298 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 ff93 	bl	8005ac8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d122      	bne.n	8004bf2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff fe98 	bl	80048e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004bba:	e01a      	b.n	8004bf2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d114      	bne.n	8004bf2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	7afa      	ldrb	r2, [r7, #11]
 8004bde:	4611      	mov	r1, r2
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	4798      	blx	r3
 8004be4:	4603      	mov	r3, r0
 8004be6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	e000      	b.n	8004bf4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e02f      	b.n	8004c90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00f      	beq.n	8004c5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6852      	ldr	r2, [r2, #4]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	4611      	mov	r1, r2
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2100      	movs	r1, #0
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 fad4 	bl	800620e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2240      	movs	r2, #64	; 0x40
 8004c72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c76:	2340      	movs	r3, #64	; 0x40
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	; 0x80
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 fac6 	bl	800620e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2240      	movs	r2, #64	; 0x40
 8004c8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	78fa      	ldrb	r2, [r7, #3]
 8004ca8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d106      	bne.n	8004d06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e012      	b.n	8004d50 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d10b      	bne.n	8004d4e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e014      	b.n	8004d9c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d10d      	bne.n	8004d9a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	4611      	mov	r1, r2
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e014      	b.n	8004de8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d10d      	bne.n	8004de6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	4611      	mov	r1, r2
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6852      	ldr	r2, [r2, #4]
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	4611      	mov	r1, r2
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
  }

  return USBD_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	3301      	adds	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004e5c:	8a3b      	ldrh	r3, [r7, #16]
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	b21a      	sxth	r2, r3
 8004e62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d005      	beq.n	8004ea2 <USBD_StdDevReq+0x26>
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d853      	bhi.n	8004f42 <USBD_StdDevReq+0xc6>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <USBD_StdDevReq+0x3a>
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	d14f      	bne.n	8004f42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e04a      	b.n	8004f4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	2b09      	cmp	r3, #9
 8004ebc:	d83b      	bhi.n	8004f36 <USBD_StdDevReq+0xba>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <USBD_StdDevReq+0x48>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	08004f2d 	.word	0x08004f2d
 8004ecc:	08004f37 	.word	0x08004f37
 8004ed0:	08004f23 	.word	0x08004f23
 8004ed4:	08004f37 	.word	0x08004f37
 8004ed8:	08004ef7 	.word	0x08004ef7
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004f37 	.word	0x08004f37
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f01 	.word	0x08004f01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f9de 	bl	80052b0 <USBD_GetDescriptor>
          break;
 8004ef4:	e024      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb43 	bl	8005584 <USBD_SetAddress>
          break;
 8004efe:	e01f      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fb82 	bl	800560c <USBD_SetConfig>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f0c:	e018      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fc21 	bl	8005758 <USBD_GetConfig>
          break;
 8004f16:	e013      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fc52 	bl	80057c4 <USBD_GetStatus>
          break;
 8004f20:	e00e      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fc81 	bl	800582c <USBD_SetFeature>
          break;
 8004f2a:	e009      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fc90 	bl	8005854 <USBD_ClrFeature>
          break;
 8004f34:	e004      	b.n	8004f40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fce7 	bl	800590c <USBD_CtlError>
          break;
 8004f3e:	bf00      	nop
      }
      break;
 8004f40:	e004      	b.n	8004f4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fce1 	bl	800590c <USBD_CtlError>
      break;
 8004f4a:	bf00      	nop
  }

  return ret;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d005      	beq.n	8004f7e <USBD_StdItfReq+0x26>
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d82f      	bhi.n	8004fd6 <USBD_StdItfReq+0x7e>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <USBD_StdItfReq+0x26>
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d12b      	bne.n	8004fd6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d81d      	bhi.n	8004fc8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	889b      	ldrh	r3, [r3, #4]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d813      	bhi.n	8004fbe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	88db      	ldrh	r3, [r3, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <USBD_StdItfReq+0x7a>
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10d      	bne.n	8004fd2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fd73 	bl	8005aa2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004fbc:	e009      	b.n	8004fd2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fca3 	bl	800590c <USBD_CtlError>
          break;
 8004fc6:	e004      	b.n	8004fd2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fc9e 	bl	800590c <USBD_CtlError>
          break;
 8004fd0:	e000      	b.n	8004fd4 <USBD_StdItfReq+0x7c>
          break;
 8004fd2:	bf00      	nop
      }
      break;
 8004fd4:	e004      	b.n	8004fe0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fc97 	bl	800590c <USBD_CtlError>
      break;
 8004fde:	bf00      	nop
  }

  return ret;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	889b      	ldrh	r3, [r3, #4]
 8004ffc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d007      	beq.n	800501a <USBD_StdEPReq+0x30>
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	f200 8145 	bhi.w	800529a <USBD_StdEPReq+0x2b0>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <USBD_StdEPReq+0x44>
 8005014:	2b20      	cmp	r3, #32
 8005016:	f040 8140 	bne.w	800529a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
      break;
 800502c:	e13a      	b.n	80052a4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d007      	beq.n	8005046 <USBD_StdEPReq+0x5c>
 8005036:	2b03      	cmp	r3, #3
 8005038:	f300 8129 	bgt.w	800528e <USBD_StdEPReq+0x2a4>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d07f      	beq.n	8005140 <USBD_StdEPReq+0x156>
 8005040:	2b01      	cmp	r3, #1
 8005042:	d03c      	beq.n	80050be <USBD_StdEPReq+0xd4>
 8005044:	e123      	b.n	800528e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d002      	beq.n	8005058 <USBD_StdEPReq+0x6e>
 8005052:	2b03      	cmp	r3, #3
 8005054:	d016      	beq.n	8005084 <USBD_StdEPReq+0x9a>
 8005056:	e02c      	b.n	80050b2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <USBD_StdEPReq+0x90>
 800505e:	7bbb      	ldrb	r3, [r7, #14]
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d00a      	beq.n	800507a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 f915 	bl	8006298 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 f911 	bl	8006298 <USBD_LL_StallEP>
 8005076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005078:	e020      	b.n	80050bc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800507a:	6839      	ldr	r1, [r7, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fc45 	bl	800590c <USBD_CtlError>
              break;
 8005082:	e01b      	b.n	80050bc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	885b      	ldrh	r3, [r3, #2]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10e      	bne.n	80050aa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <USBD_StdEPReq+0xc0>
 8005092:	7bbb      	ldrb	r3, [r7, #14]
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d008      	beq.n	80050aa <USBD_StdEPReq+0xc0>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	88db      	ldrh	r3, [r3, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80050a0:	7bbb      	ldrb	r3, [r7, #14]
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 f8f7 	bl	8006298 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fcf9 	bl	8005aa2 <USBD_CtlSendStatus>

              break;
 80050b0:	e004      	b.n	80050bc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fc29 	bl	800590c <USBD_CtlError>
              break;
 80050ba:	bf00      	nop
          }
          break;
 80050bc:	e0ec      	b.n	8005298 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d002      	beq.n	80050d0 <USBD_StdEPReq+0xe6>
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d016      	beq.n	80050fc <USBD_StdEPReq+0x112>
 80050ce:	e030      	b.n	8005132 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <USBD_StdEPReq+0x108>
 80050d6:	7bbb      	ldrb	r3, [r7, #14]
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d00a      	beq.n	80050f2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80050dc:	7bbb      	ldrb	r3, [r7, #14]
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f8d9 	bl	8006298 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f001 f8d5 	bl	8006298 <USBD_LL_StallEP>
 80050ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80050f0:	e025      	b.n	800513e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80050f2:	6839      	ldr	r1, [r7, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fc09 	bl	800590c <USBD_CtlError>
              break;
 80050fa:	e020      	b.n	800513e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	885b      	ldrh	r3, [r3, #2]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d11b      	bne.n	800513c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005104:	7bbb      	ldrb	r3, [r7, #14]
 8005106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 f8df 	bl	80062d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fcc2 	bl	8005aa2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005130:	e004      	b.n	800513c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fbe9 	bl	800590c <USBD_CtlError>
              break;
 800513a:	e000      	b.n	800513e <USBD_StdEPReq+0x154>
              break;
 800513c:	bf00      	nop
          }
          break;
 800513e:	e0ab      	b.n	8005298 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d002      	beq.n	8005152 <USBD_StdEPReq+0x168>
 800514c:	2b03      	cmp	r3, #3
 800514e:	d032      	beq.n	80051b6 <USBD_StdEPReq+0x1cc>
 8005150:	e097      	b.n	8005282 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005152:	7bbb      	ldrb	r3, [r7, #14]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <USBD_StdEPReq+0x17e>
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d004      	beq.n	8005168 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fbd3 	bl	800590c <USBD_CtlError>
                break;
 8005166:	e091      	b.n	800528c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da0b      	bge.n	8005188 <USBD_StdEPReq+0x19e>
 8005170:	7bbb      	ldrb	r3, [r7, #14]
 8005172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	3310      	adds	r3, #16
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	3304      	adds	r3, #4
 8005186:	e00b      	b.n	80051a0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005188:	7bbb      	ldrb	r3, [r7, #14]
 800518a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2202      	movs	r2, #2
 80051ac:	4619      	mov	r1, r3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fc1d 	bl	80059ee <USBD_CtlSendData>
              break;
 80051b4:	e06a      	b.n	800528c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80051b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da11      	bge.n	80051e2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80051be:	7bbb      	ldrb	r3, [r7, #14]
 80051c0:	f003 020f 	and.w	r2, r3, #15
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	3324      	adds	r3, #36	; 0x24
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d117      	bne.n	8005208 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb96 	bl	800590c <USBD_CtlError>
                  break;
 80051e0:	e054      	b.n	800528c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80051e2:	7bbb      	ldrb	r3, [r7, #14]
 80051e4:	f003 020f 	and.w	r2, r3, #15
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb83 	bl	800590c <USBD_CtlError>
                  break;
 8005206:	e041      	b.n	800528c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800520c:	2b00      	cmp	r3, #0
 800520e:	da0b      	bge.n	8005228 <USBD_StdEPReq+0x23e>
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	3310      	adds	r3, #16
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	3304      	adds	r3, #4
 8005226:	e00b      	b.n	8005240 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005228:	7bbb      	ldrb	r3, [r7, #14]
 800522a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	3304      	adds	r3, #4
 8005240:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005242:	7bbb      	ldrb	r3, [r7, #14]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <USBD_StdEPReq+0x264>
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	2b80      	cmp	r3, #128	; 0x80
 800524c:	d103      	bne.n	8005256 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e00e      	b.n	8005274 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f001 f85a 	bl	8006314 <USBD_LL_IsStallEP>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2201      	movs	r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e002      	b.n	8005274 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2202      	movs	r2, #2
 8005278:	4619      	mov	r1, r3
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fbb7 	bl	80059ee <USBD_CtlSendData>
              break;
 8005280:	e004      	b.n	800528c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb41 	bl	800590c <USBD_CtlError>
              break;
 800528a:	bf00      	nop
          }
          break;
 800528c:	e004      	b.n	8005298 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb3b 	bl	800590c <USBD_CtlError>
          break;
 8005296:	bf00      	nop
      }
      break;
 8005298:	e004      	b.n	80052a4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb35 	bl	800590c <USBD_CtlError>
      break;
 80052a2:	bf00      	nop
  }

  return ret;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	885b      	ldrh	r3, [r3, #2]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	f200 8128 	bhi.w	8005526 <USBD_GetDescriptor+0x276>
 80052d6:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <USBD_GetDescriptor+0x2c>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	08005311 	.word	0x08005311
 80052e4:	08005351 	.word	0x08005351
 80052e8:	08005527 	.word	0x08005527
 80052ec:	08005527 	.word	0x08005527
 80052f0:	080054c7 	.word	0x080054c7
 80052f4:	080054f3 	.word	0x080054f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	7c12      	ldrb	r2, [r2, #16]
 8005304:	f107 0108 	add.w	r1, r7, #8
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3
 800530c:	60f8      	str	r0, [r7, #12]
      break;
 800530e:	e112      	b.n	8005536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	7c1b      	ldrb	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f107 0208 	add.w	r2, r7, #8
 8005324:	4610      	mov	r0, r2
 8005326:	4798      	blx	r3
 8005328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	2202      	movs	r2, #2
 8005330:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005332:	e100      	b.n	8005536 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f107 0208 	add.w	r2, r7, #8
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
 8005344:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	2202      	movs	r2, #2
 800534c:	701a      	strb	r2, [r3, #0]
      break;
 800534e:	e0f2      	b.n	8005536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	885b      	ldrh	r3, [r3, #2]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b05      	cmp	r3, #5
 8005358:	f200 80ac 	bhi.w	80054b4 <USBD_GetDescriptor+0x204>
 800535c:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <USBD_GetDescriptor+0xb4>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	0800537d 	.word	0x0800537d
 8005368:	080053b1 	.word	0x080053b1
 800536c:	080053e5 	.word	0x080053e5
 8005370:	08005419 	.word	0x08005419
 8005374:	0800544d 	.word	0x0800544d
 8005378:	08005481 	.word	0x08005481
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	7c12      	ldrb	r2, [r2, #16]
 8005394:	f107 0108 	add.w	r1, r7, #8
 8005398:	4610      	mov	r0, r2
 800539a:	4798      	blx	r3
 800539c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800539e:	e091      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fab2 	bl	800590c <USBD_CtlError>
            err++;
 80053a8:	7afb      	ldrb	r3, [r7, #11]
 80053aa:	3301      	adds	r3, #1
 80053ac:	72fb      	strb	r3, [r7, #11]
          break;
 80053ae:	e089      	b.n	80054c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	7c12      	ldrb	r2, [r2, #16]
 80053c8:	f107 0108 	add.w	r1, r7, #8
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3
 80053d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80053d2:	e077      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa98 	bl	800590c <USBD_CtlError>
            err++;
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	3301      	adds	r3, #1
 80053e0:	72fb      	strb	r3, [r7, #11]
          break;
 80053e2:	e06f      	b.n	80054c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	7c12      	ldrb	r2, [r2, #16]
 80053fc:	f107 0108 	add.w	r1, r7, #8
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
 8005404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005406:	e05d      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa7e 	bl	800590c <USBD_CtlError>
            err++;
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	3301      	adds	r3, #1
 8005414:	72fb      	strb	r3, [r7, #11]
          break;
 8005416:	e055      	b.n	80054c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	7c12      	ldrb	r2, [r2, #16]
 8005430:	f107 0108 	add.w	r1, r7, #8
 8005434:	4610      	mov	r0, r2
 8005436:	4798      	blx	r3
 8005438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800543a:	e043      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa64 	bl	800590c <USBD_CtlError>
            err++;
 8005444:	7afb      	ldrb	r3, [r7, #11]
 8005446:	3301      	adds	r3, #1
 8005448:	72fb      	strb	r3, [r7, #11]
          break;
 800544a:	e03b      	b.n	80054c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	7c12      	ldrb	r2, [r2, #16]
 8005464:	f107 0108 	add.w	r1, r7, #8
 8005468:	4610      	mov	r0, r2
 800546a:	4798      	blx	r3
 800546c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800546e:	e029      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa4a 	bl	800590c <USBD_CtlError>
            err++;
 8005478:	7afb      	ldrb	r3, [r7, #11]
 800547a:	3301      	adds	r3, #1
 800547c:	72fb      	strb	r3, [r7, #11]
          break;
 800547e:	e021      	b.n	80054c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	7c12      	ldrb	r2, [r2, #16]
 8005498:	f107 0108 	add.w	r1, r7, #8
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
 80054a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054a2:	e00f      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa30 	bl	800590c <USBD_CtlError>
            err++;
 80054ac:	7afb      	ldrb	r3, [r7, #11]
 80054ae:	3301      	adds	r3, #1
 80054b0:	72fb      	strb	r3, [r7, #11]
          break;
 80054b2:	e007      	b.n	80054c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa28 	bl	800590c <USBD_CtlError>
          err++;
 80054bc:	7afb      	ldrb	r3, [r7, #11]
 80054be:	3301      	adds	r3, #1
 80054c0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80054c2:	bf00      	nop
      }
      break;
 80054c4:	e037      	b.n	8005536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7c1b      	ldrb	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	f107 0208 	add.w	r2, r7, #8
 80054da:	4610      	mov	r0, r2
 80054dc:	4798      	blx	r3
 80054de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80054e0:	e029      	b.n	8005536 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa11 	bl	800590c <USBD_CtlError>
        err++;
 80054ea:	7afb      	ldrb	r3, [r7, #11]
 80054ec:	3301      	adds	r3, #1
 80054ee:	72fb      	strb	r3, [r7, #11]
      break;
 80054f0:	e021      	b.n	8005536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	7c1b      	ldrb	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10d      	bne.n	8005516 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	f107 0208 	add.w	r2, r7, #8
 8005506:	4610      	mov	r0, r2
 8005508:	4798      	blx	r3
 800550a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	2207      	movs	r2, #7
 8005512:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005514:	e00f      	b.n	8005536 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9f7 	bl	800590c <USBD_CtlError>
        err++;
 800551e:	7afb      	ldrb	r3, [r7, #11]
 8005520:	3301      	adds	r3, #1
 8005522:	72fb      	strb	r3, [r7, #11]
      break;
 8005524:	e007      	b.n	8005536 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9ef 	bl	800590c <USBD_CtlError>
      err++;
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	3301      	adds	r3, #1
 8005532:	72fb      	strb	r3, [r7, #11]
      break;
 8005534:	bf00      	nop
  }

  if (err != 0U)
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11e      	bne.n	800557a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	88db      	ldrh	r3, [r3, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d016      	beq.n	8005572 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005544:	893b      	ldrh	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00e      	beq.n	8005568 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	88da      	ldrh	r2, [r3, #6]
 800554e:	893b      	ldrh	r3, [r7, #8]
 8005550:	4293      	cmp	r3, r2
 8005552:	bf28      	it	cs
 8005554:	4613      	movcs	r3, r2
 8005556:	b29b      	uxth	r3, r3
 8005558:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800555a:	893b      	ldrh	r3, [r7, #8]
 800555c:	461a      	mov	r2, r3
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fa44 	bl	80059ee <USBD_CtlSendData>
 8005566:	e009      	b.n	800557c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9ce 	bl	800590c <USBD_CtlError>
 8005570:	e004      	b.n	800557c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa95 	bl	8005aa2 <USBD_CtlSendStatus>
 8005578:	e000      	b.n	800557c <USBD_GetDescriptor+0x2cc>
    return;
 800557a:	bf00      	nop
  }
}
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop

08005584 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	889b      	ldrh	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d131      	bne.n	80055fa <USBD_SetAddress+0x76>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	88db      	ldrh	r3, [r3, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d12d      	bne.n	80055fa <USBD_SetAddress+0x76>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	885b      	ldrh	r3, [r3, #2]
 80055a2:	2b7f      	cmp	r3, #127	; 0x7f
 80055a4:	d829      	bhi.n	80055fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	885b      	ldrh	r3, [r3, #2]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d104      	bne.n	80055c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f9a3 	bl	800590c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c6:	e01d      	b.n	8005604 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	7bfa      	ldrb	r2, [r7, #15]
 80055cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fec9 	bl	800636c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa61 	bl	8005aa2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ee:	e009      	b.n	8005604 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055f8:	e004      	b.n	8005604 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f985 	bl	800590c <USBD_CtlError>
  }
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	885b      	ldrh	r3, [r3, #2]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <USBD_SetConfig+0x148>)
 8005622:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005624:	4b4b      	ldr	r3, [pc, #300]	; (8005754 <USBD_SetConfig+0x148>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d905      	bls.n	8005638 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f96c 	bl	800590c <USBD_CtlError>
    return USBD_FAIL;
 8005634:	2303      	movs	r3, #3
 8005636:	e088      	b.n	800574a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d002      	beq.n	800564a <USBD_SetConfig+0x3e>
 8005644:	2b03      	cmp	r3, #3
 8005646:	d025      	beq.n	8005694 <USBD_SetConfig+0x88>
 8005648:	e071      	b.n	800572e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800564a:	4b42      	ldr	r3, [pc, #264]	; (8005754 <USBD_SetConfig+0x148>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01c      	beq.n	800568c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005652:	4b40      	ldr	r3, [pc, #256]	; (8005754 <USBD_SetConfig+0x148>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800565c:	4b3d      	ldr	r3, [pc, #244]	; (8005754 <USBD_SetConfig+0x148>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff f948 	bl	80048f8 <USBD_SetClassConfig>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f949 	bl	800590c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800567a:	e065      	b.n	8005748 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa10 	bl	8005aa2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2203      	movs	r2, #3
 8005686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800568a:	e05d      	b.n	8005748 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fa08 	bl	8005aa2 <USBD_CtlSendStatus>
      break;
 8005692:	e059      	b.n	8005748 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005694:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <USBD_SetConfig+0x148>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d112      	bne.n	80056c2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80056a4:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <USBD_SetConfig+0x148>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80056ae:	4b29      	ldr	r3, [pc, #164]	; (8005754 <USBD_SetConfig+0x148>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff f93b 	bl	8004930 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9f1 	bl	8005aa2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80056c0:	e042      	b.n	8005748 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80056c2:	4b24      	ldr	r3, [pc, #144]	; (8005754 <USBD_SetConfig+0x148>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d02a      	beq.n	8005726 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff f929 	bl	8004930 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80056de:	4b1d      	ldr	r3, [pc, #116]	; (8005754 <USBD_SetConfig+0x148>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80056e8:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <USBD_SetConfig+0x148>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff f902 	bl	80048f8 <USBD_SetClassConfig>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00f      	beq.n	800571e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f903 	bl	800590c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff f90e 	bl	8004930 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800571c:	e014      	b.n	8005748 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9bf 	bl	8005aa2 <USBD_CtlSendStatus>
      break;
 8005724:	e010      	b.n	8005748 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9bb 	bl	8005aa2 <USBD_CtlSendStatus>
      break;
 800572c:	e00c      	b.n	8005748 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8eb 	bl	800590c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <USBD_SetConfig+0x148>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff f8f7 	bl	8004930 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	73fb      	strb	r3, [r7, #15]
      break;
 8005746:	bf00      	nop
  }

  return ret;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	200001a4 	.word	0x200001a4

08005758 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	88db      	ldrh	r3, [r3, #6]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d004      	beq.n	8005774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8cd 	bl	800590c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005772:	e023      	b.n	80057bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	dc02      	bgt.n	8005786 <USBD_GetConfig+0x2e>
 8005780:	2b00      	cmp	r3, #0
 8005782:	dc03      	bgt.n	800578c <USBD_GetConfig+0x34>
 8005784:	e015      	b.n	80057b2 <USBD_GetConfig+0x5a>
 8005786:	2b03      	cmp	r3, #3
 8005788:	d00b      	beq.n	80057a2 <USBD_GetConfig+0x4a>
 800578a:	e012      	b.n	80057b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3308      	adds	r3, #8
 8005796:	2201      	movs	r2, #1
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f927 	bl	80059ee <USBD_CtlSendData>
        break;
 80057a0:	e00c      	b.n	80057bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3304      	adds	r3, #4
 80057a6:	2201      	movs	r2, #1
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f91f 	bl	80059ee <USBD_CtlSendData>
        break;
 80057b0:	e004      	b.n	80057bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f8a9 	bl	800590c <USBD_CtlError>
        break;
 80057ba:	bf00      	nop
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d81e      	bhi.n	800581a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	88db      	ldrh	r3, [r3, #6]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d004      	beq.n	80057ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f890 	bl	800590c <USBD_CtlError>
        break;
 80057ec:	e01a      	b.n	8005824 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f043 0202 	orr.w	r2, r3, #2
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	330c      	adds	r3, #12
 800580e:	2202      	movs	r2, #2
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8eb 	bl	80059ee <USBD_CtlSendData>
      break;
 8005818:	e004      	b.n	8005824 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f875 	bl	800590c <USBD_CtlError>
      break;
 8005822:	bf00      	nop
  }
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	885b      	ldrh	r3, [r3, #2]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d106      	bne.n	800584c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f92b 	bl	8005aa2 <USBD_CtlSendStatus>
  }
}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005864:	b2db      	uxtb	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	2b02      	cmp	r3, #2
 800586a:	d80b      	bhi.n	8005884 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	885b      	ldrh	r3, [r3, #2]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10c      	bne.n	800588e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f910 	bl	8005aa2 <USBD_CtlSendStatus>
      }
      break;
 8005882:	e004      	b.n	800588e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f840 	bl	800590c <USBD_CtlError>
      break;
 800588c:	e000      	b.n	8005890 <USBD_ClrFeature+0x3c>
      break;
 800588e:	bf00      	nop
  }
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fabb 	bl	8004e3e <SWAPBYTE>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff faae 	bl	8004e3e <SWAPBYTE>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f7ff faa1 	bl	8004e3e <SWAPBYTE>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	80da      	strh	r2, [r3, #6]
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fcbd 	bl	8006298 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800591e:	2100      	movs	r1, #0
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fcb9 	bl	8006298 <USBD_LL_StallEP>
}
 8005926:	bf00      	nop
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d036      	beq.n	80059b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005948:	6938      	ldr	r0, [r7, #16]
 800594a:	f000 f836 	bl	80059ba <USBD_GetLen>
 800594e:	4603      	mov	r3, r0
 8005950:	3301      	adds	r3, #1
 8005952:	b29b      	uxth	r3, r3
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4413      	add	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
  idx++;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
 800596a:	3301      	adds	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4413      	add	r3, r2
 8005974:	2203      	movs	r2, #3
 8005976:	701a      	strb	r2, [r3, #0]
  idx++;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	3301      	adds	r3, #1
 800597c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800597e:	e013      	b.n	80059a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4413      	add	r3, r2
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3301      	adds	r3, #1
 8005990:	613b      	str	r3, [r7, #16]
    idx++;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
 8005994:	3301      	adds	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	4413      	add	r3, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	3301      	adds	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e7      	bne.n	8005980 <USBD_GetString+0x52>
 80059b0:	e000      	b.n	80059b4 <USBD_GetString+0x86>
    return;
 80059b2:	bf00      	nop
  }
}
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80059ca:	e005      	b.n	80059d8 <USBD_GetLen+0x1e>
  {
    len++;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	3301      	adds	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3301      	adds	r3, #1
 80059d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f5      	bne.n	80059cc <USBD_GetLen+0x12>
  }

  return len;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	2100      	movs	r1, #0
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fcc8 	bl	80063aa <USBD_LL_Transmit>

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	2100      	movs	r1, #0
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fcb7 	bl	80063aa <USBD_LL_Transmit>

  return USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	2100      	movs	r1, #0
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fcbb 	bl	80063ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	2100      	movs	r1, #0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fcaa 	bl	80063ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2204      	movs	r2, #4
 8005aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fc76 	bl	80063aa <USBD_LL_Transmit>

  return USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2200      	movs	r2, #0
 8005adc:	2100      	movs	r1, #0
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fc84 	bl	80063ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8005af4:	2201      	movs	r2, #1
 8005af6:	4912      	ldr	r1, [pc, #72]	; (8005b40 <MX_USB_DEVICE_Init+0x50>)
 8005af8:	4812      	ldr	r0, [pc, #72]	; (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005afa:	f7fe fe8f 	bl	800481c <USBD_Init>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005b04:	f7fa fda8 	bl	8000658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8005b08:	490f      	ldr	r1, [pc, #60]	; (8005b48 <MX_USB_DEVICE_Init+0x58>)
 8005b0a:	480e      	ldr	r0, [pc, #56]	; (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005b0c:	f7fe feb6 	bl	800487c <USBD_RegisterClass>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005b16:	f7fa fd9f 	bl	8000658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8005b1a:	490c      	ldr	r1, [pc, #48]	; (8005b4c <MX_USB_DEVICE_Init+0x5c>)
 8005b1c:	4809      	ldr	r0, [pc, #36]	; (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005b1e:	f7fe fe07 	bl	8004730 <USBD_CDC_RegisterInterface>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005b28:	f7fa fd96 	bl	8000658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8005b2c:	4805      	ldr	r0, [pc, #20]	; (8005b44 <MX_USB_DEVICE_Init+0x54>)
 8005b2e:	f7fe fecc 	bl	80048ca <USBD_Start>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005b38:	f7fa fd8e 	bl	8000658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000138 	.word	0x20000138
 8005b44:	200003cc 	.word	0x200003cc
 8005b48:	20000020 	.word	0x20000020
 8005b4c:	20000124 	.word	0x20000124

08005b50 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8005b54:	2200      	movs	r2, #0
 8005b56:	4905      	ldr	r1, [pc, #20]	; (8005b6c <CDC_Init_HS+0x1c>)
 8005b58:	4805      	ldr	r0, [pc, #20]	; (8005b70 <CDC_Init_HS+0x20>)
 8005b5a:	f7fe fdfe 	bl	800475a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8005b5e:	4905      	ldr	r1, [pc, #20]	; (8005b74 <CDC_Init_HS+0x24>)
 8005b60:	4803      	ldr	r0, [pc, #12]	; (8005b70 <CDC_Init_HS+0x20>)
 8005b62:	f7fe fe18 	bl	8004796 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005b66:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000e9c 	.word	0x20000e9c
 8005b70:	200003cc 	.word	0x200003cc
 8005b74:	2000069c 	.word	0x2000069c

08005b78 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8005b7c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
 8005b94:	4613      	mov	r3, r2
 8005b96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8005b98:	79fb      	ldrb	r3, [r7, #7]
 8005b9a:	2b23      	cmp	r3, #35	; 0x23
 8005b9c:	d84a      	bhi.n	8005c34 <CDC_Control_HS+0xac>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <CDC_Control_HS+0x1c>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005c35 	.word	0x08005c35
 8005ba8:	08005c35 	.word	0x08005c35
 8005bac:	08005c35 	.word	0x08005c35
 8005bb0:	08005c35 	.word	0x08005c35
 8005bb4:	08005c35 	.word	0x08005c35
 8005bb8:	08005c35 	.word	0x08005c35
 8005bbc:	08005c35 	.word	0x08005c35
 8005bc0:	08005c35 	.word	0x08005c35
 8005bc4:	08005c35 	.word	0x08005c35
 8005bc8:	08005c35 	.word	0x08005c35
 8005bcc:	08005c35 	.word	0x08005c35
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005c35 	.word	0x08005c35
 8005bd8:	08005c35 	.word	0x08005c35
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c35 	.word	0x08005c35
 8005be4:	08005c35 	.word	0x08005c35
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c35 	.word	0x08005c35
 8005bf0:	08005c35 	.word	0x08005c35
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
 8005c00:	08005c35 	.word	0x08005c35
 8005c04:	08005c35 	.word	0x08005c35
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005c35 	.word	0x08005c35
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c35 	.word	0x08005c35
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c35 	.word	0x08005c35
 8005c2c:	08005c35 	.word	0x08005c35
 8005c30:	08005c35 	.word	0x08005c35
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005c34:	bf00      	nop
  }

  return (USBD_OK);
 8005c36:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4805      	ldr	r0, [pc, #20]	; (8005c68 <CDC_Receive_HS+0x24>)
 8005c52:	f7fe fda0 	bl	8004796 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8005c56:	4804      	ldr	r0, [pc, #16]	; (8005c68 <CDC_Receive_HS+0x24>)
 8005c58:	f7fe fdb6 	bl	80047c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005c5c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200003cc 	.word	0x200003cc

08005c6c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8005c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	6039      	str	r1, [r7, #0]
 8005c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2212      	movs	r2, #18
 8005ca0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8005ca2:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000154 	.word	0x20000154

08005cb4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000168 	.word	0x20000168

08005cd8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	6039      	str	r1, [r7, #0]
 8005ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	4907      	ldr	r1, [pc, #28]	; (8005d0c <USBD_HS_ProductStrDescriptor+0x34>)
 8005cee:	4808      	ldr	r0, [pc, #32]	; (8005d10 <USBD_HS_ProductStrDescriptor+0x38>)
 8005cf0:	f7ff fe1d 	bl	800592e <USBD_GetString>
 8005cf4:	e004      	b.n	8005d00 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	4904      	ldr	r1, [pc, #16]	; (8005d0c <USBD_HS_ProductStrDescriptor+0x34>)
 8005cfa:	4805      	ldr	r0, [pc, #20]	; (8005d10 <USBD_HS_ProductStrDescriptor+0x38>)
 8005cfc:	f7ff fe17 	bl	800592e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d00:	4b02      	ldr	r3, [pc, #8]	; (8005d0c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2000169c 	.word	0x2000169c
 8005d10:	08006568 	.word	0x08006568

08005d14 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	4904      	ldr	r1, [pc, #16]	; (8005d34 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8005d24:	4804      	ldr	r0, [pc, #16]	; (8005d38 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8005d26:	f7ff fe02 	bl	800592e <USBD_GetString>
  return USBD_StrDesc;
 8005d2a:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	2000169c 	.word	0x2000169c
 8005d38:	08006580 	.word	0x08006580

08005d3c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	6039      	str	r1, [r7, #0]
 8005d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	221a      	movs	r2, #26
 8005d4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005d4e:	f000 f843 	bl	8005dd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8005d52:	4b02      	ldr	r3, [pc, #8]	; (8005d5c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	2000016c 	.word	0x2000016c

08005d60 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	4907      	ldr	r1, [pc, #28]	; (8005d94 <USBD_HS_ConfigStrDescriptor+0x34>)
 8005d76:	4808      	ldr	r0, [pc, #32]	; (8005d98 <USBD_HS_ConfigStrDescriptor+0x38>)
 8005d78:	f7ff fdd9 	bl	800592e <USBD_GetString>
 8005d7c:	e004      	b.n	8005d88 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4904      	ldr	r1, [pc, #16]	; (8005d94 <USBD_HS_ConfigStrDescriptor+0x34>)
 8005d82:	4805      	ldr	r0, [pc, #20]	; (8005d98 <USBD_HS_ConfigStrDescriptor+0x38>)
 8005d84:	f7ff fdd3 	bl	800592e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000169c 	.word	0x2000169c
 8005d98:	08006594 	.word	0x08006594

08005d9c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	6039      	str	r1, [r7, #0]
 8005da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	4907      	ldr	r1, [pc, #28]	; (8005dd0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8005db2:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8005db4:	f7ff fdbb 	bl	800592e <USBD_GetString>
 8005db8:	e004      	b.n	8005dc4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	4904      	ldr	r1, [pc, #16]	; (8005dd0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8005dbe:	4805      	ldr	r0, [pc, #20]	; (8005dd4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8005dc0:	f7ff fdb5 	bl	800592e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005dc4:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	2000169c 	.word	0x2000169c
 8005dd4:	080065a0 	.word	0x080065a0

08005dd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <Get_SerialNum+0x44>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <Get_SerialNum+0x48>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <Get_SerialNum+0x4c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005dfe:	2208      	movs	r2, #8
 8005e00:	4909      	ldr	r1, [pc, #36]	; (8005e28 <Get_SerialNum+0x50>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f814 	bl	8005e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005e08:	2204      	movs	r2, #4
 8005e0a:	4908      	ldr	r1, [pc, #32]	; (8005e2c <Get_SerialNum+0x54>)
 8005e0c:	68b8      	ldr	r0, [r7, #8]
 8005e0e:	f000 f80f 	bl	8005e30 <IntToUnicode>
  }
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	1fff7a10 	.word	0x1fff7a10
 8005e20:	1fff7a14 	.word	0x1fff7a14
 8005e24:	1fff7a18 	.word	0x1fff7a18
 8005e28:	2000016e 	.word	0x2000016e
 8005e2c:	2000017e 	.word	0x2000017e

08005e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	75fb      	strb	r3, [r7, #23]
 8005e46:	e027      	b.n	8005e98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	0f1b      	lsrs	r3, r3, #28
 8005e4c:	2b09      	cmp	r3, #9
 8005e4e:	d80b      	bhi.n	8005e68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	0f1b      	lsrs	r3, r3, #28
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	440b      	add	r3, r1
 8005e60:	3230      	adds	r2, #48	; 0x30
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e00a      	b.n	8005e7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	0f1b      	lsrs	r3, r3, #28
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4619      	mov	r1, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	440b      	add	r3, r1
 8005e78:	3237      	adds	r2, #55	; 0x37
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	3301      	adds	r3, #1
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	3301      	adds	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
 8005e98:	7dfa      	ldrb	r2, [r7, #23]
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d3d3      	bcc.n	8005e48 <IntToUnicode+0x18>
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005eb8:	f107 0314 	add.w	r3, r7, #20
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <HAL_PCD_MspInit+0x94>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d134      	bne.n	8005f3c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <HAL_PCD_MspInit+0x98>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_PCD_MspInit+0x98>)
 8005edc:	f043 0302 	orr.w	r3, r3, #2
 8005ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee2:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_PCD_MspInit+0x98>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005eee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005efc:	2303      	movs	r3, #3
 8005efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005f00:	230c      	movs	r3, #12
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f04:	f107 0314 	add.w	r3, r7, #20
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4810      	ldr	r0, [pc, #64]	; (8005f4c <HAL_PCD_MspInit+0x9c>)
 8005f0c:	f7fa fe68 	bl	8000be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <HAL_PCD_MspInit+0x98>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <HAL_PCD_MspInit+0x98>)
 8005f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <HAL_PCD_MspInit+0x98>)
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	204d      	movs	r0, #77	; 0x4d
 8005f32:	f7fa fe1e 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8005f36:	204d      	movs	r0, #77	; 0x4d
 8005f38:	f7fa fe37 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3728      	adds	r7, #40	; 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40040000 	.word	0x40040000
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40020400 	.word	0x40020400

08005f50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fe fcfa 	bl	8004960 <USBD_LL_SetupStage>
}
 8005f6c:	bf00      	nop
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f7fe fd34 	bl	8004a0a <USBD_LL_DataOutStage>
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	3348      	adds	r3, #72	; 0x48
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7fe fd7d 	bl	8004ad0 <USBD_LL_DataInStage>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe fe91 	bl	8004d14 <USBD_LL_SOF>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
 8006012:	e008      	b.n	8006026 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d102      	bne.n	8006022 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800601c:	2301      	movs	r3, #1
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e001      	b.n	8006026 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006022:	f7fa fb19 	bl	8000658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fe31 	bl	8004c98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fddd 	bl	8004bfc <USBD_LL_Reset>
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fe2c 	bl	8004cb8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006072:	f043 0301 	orr.w	r3, r3, #1
 8006076:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006080:	4b04      	ldr	r3, [pc, #16]	; (8006094 <HAL_PCD_SuspendCallback+0x48>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4a03      	ldr	r2, [pc, #12]	; (8006094 <HAL_PCD_SuspendCallback+0x48>)
 8006086:	f043 0306 	orr.w	r3, r3, #6
 800608a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000ed00 	.word	0xe000ed00

08006098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fe1c 	bl	8004ce4 <USBD_LL_Resume>
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060c6:	78fa      	ldrb	r2, [r7, #3]
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fe6a 	bl	8004da4 <USBD_LL_IsoOUTIncomplete>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fe32 	bl	8004d58 <USBD_LL_IsoINIncomplete>
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fe70 	bl	8004df0 <USBD_LL_DevConnected>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fe6d 	bl	8004e06 <USBD_LL_DevDisconnected>
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d140      	bne.n	80061c6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8006144:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006150:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006154:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006156:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <USBD_LL_Init+0xa0>)
 8006158:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800615a:	4b1d      	ldr	r3, [pc, #116]	; (80061d0 <USBD_LL_Init+0x9c>)
 800615c:	2206      	movs	r2, #6
 800615e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006162:	2202      	movs	r2, #2
 8006164:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006166:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006168:	2200      	movs	r2, #0
 800616a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <USBD_LL_Init+0x9c>)
 800616e:	2202      	movs	r2, #2
 8006170:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006172:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006174:	2200      	movs	r2, #0
 8006176:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <USBD_LL_Init+0x9c>)
 800617a:	2200      	movs	r2, #0
 800617c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800617e:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006180:	2200      	movs	r2, #0
 8006182:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006186:	2200      	movs	r2, #0
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <USBD_LL_Init+0x9c>)
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006192:	2200      	movs	r2, #0
 8006194:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8006196:	480e      	ldr	r0, [pc, #56]	; (80061d0 <USBD_LL_Init+0x9c>)
 8006198:	f7fa ff01 	bl	8000f9e <HAL_PCD_Init>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80061a2:	f7fa fa59 	bl	8000658 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80061a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061aa:	4809      	ldr	r0, [pc, #36]	; (80061d0 <USBD_LL_Init+0x9c>)
 80061ac:	f7fc f85d 	bl	800226a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80061b0:	2280      	movs	r2, #128	; 0x80
 80061b2:	2100      	movs	r1, #0
 80061b4:	4806      	ldr	r0, [pc, #24]	; (80061d0 <USBD_LL_Init+0x9c>)
 80061b6:	f7fc f811 	bl	80021dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80061ba:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80061be:	2101      	movs	r1, #1
 80061c0:	4803      	ldr	r0, [pc, #12]	; (80061d0 <USBD_LL_Init+0x9c>)
 80061c2:	f7fc f80b 	bl	80021dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	2000189c 	.word	0x2000189c
 80061d4:	40040000 	.word	0x40040000

080061d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fa fff2 	bl	80011d8 <HAL_PCD_Start>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f942 	bl	8006484 <USBD_Get_USB_Status>
 8006200:	4603      	mov	r3, r0
 8006202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006204:	7bbb      	ldrb	r3, [r7, #14]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	4608      	mov	r0, r1
 8006218:	4611      	mov	r1, r2
 800621a:	461a      	mov	r2, r3
 800621c:	4603      	mov	r3, r0
 800621e:	70fb      	strb	r3, [r7, #3]
 8006220:	460b      	mov	r3, r1
 8006222:	70bb      	strb	r3, [r7, #2]
 8006224:	4613      	mov	r3, r2
 8006226:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006236:	78bb      	ldrb	r3, [r7, #2]
 8006238:	883a      	ldrh	r2, [r7, #0]
 800623a:	78f9      	ldrb	r1, [r7, #3]
 800623c:	f7fb fbd6 	bl	80019ec <HAL_PCD_EP_Open>
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f91c 	bl	8006484 <USBD_Get_USB_Status>
 800624c:	4603      	mov	r3, r0
 800624e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006250:	7bbb      	ldrb	r3, [r7, #14]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006274:	78fa      	ldrb	r2, [r7, #3]
 8006276:	4611      	mov	r1, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f7fb fc1f 	bl	8001abc <HAL_PCD_EP_Close>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 f8fd 	bl	8006484 <USBD_Get_USB_Status>
 800628a:	4603      	mov	r3, r0
 800628c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800628e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	4611      	mov	r1, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fb fcf7 	bl	8001caa <HAL_PCD_EP_SetStall>
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f8de 	bl	8006484 <USBD_Get_USB_Status>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb fd3c 	bl	8001d72 <HAL_PCD_EP_ClrStall>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f8bf 	bl	8006484 <USBD_Get_USB_Status>
 8006306:	4603      	mov	r3, r0
 8006308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800630a:	7bbb      	ldrb	r3, [r7, #14]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006326:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800632c:	2b00      	cmp	r3, #0
 800632e:	da0b      	bge.n	8006348 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	4613      	mov	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	333e      	adds	r3, #62	; 0x3e
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	e00b      	b.n	8006360 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	4613      	mov	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800635e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7fb fb09 	bl	80019a2 <HAL_PCD_SetAddress>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f874 	bl	8006484 <USBD_Get_USB_Status>
 800639c:	4603      	mov	r3, r0
 800639e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	460b      	mov	r3, r1
 80063b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80063c8:	7af9      	ldrb	r1, [r7, #11]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	f7fb fc22 	bl	8001c16 <HAL_PCD_EP_Transmit>
 80063d2:	4603      	mov	r3, r0
 80063d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f853 	bl	8006484 <USBD_Get_USB_Status>
 80063de:	4603      	mov	r3, r0
 80063e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80063e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	460b      	mov	r3, r1
 80063fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800640a:	7af9      	ldrb	r1, [r7, #11]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	f7fb fb9e 	bl	8001b50 <HAL_PCD_EP_Receive>
 8006414:	4603      	mov	r3, r0
 8006416:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f832 	bl	8006484 <USBD_Get_USB_Status>
 8006420:	4603      	mov	r3, r0
 8006422:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006424:	7dbb      	ldrb	r3, [r7, #22]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f7fb fbce 	bl	8001be6 <HAL_PCD_EP_GetRxCount>
 800644a:	4603      	mov	r3, r0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800645c:	4b03      	ldr	r3, [pc, #12]	; (800646c <USBD_static_malloc+0x18>)
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	200001a8 	.word	0x200001a8

08006470 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d817      	bhi.n	80064c8 <USBD_Get_USB_Status+0x44>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <USBD_Get_USB_Status+0x1c>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064b7 	.word	0x080064b7
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064c3 	.word	0x080064c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73fb      	strb	r3, [r7, #15]
    break;
 80064b4:	e00b      	b.n	80064ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064b6:	2303      	movs	r3, #3
 80064b8:	73fb      	strb	r3, [r7, #15]
    break;
 80064ba:	e008      	b.n	80064ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064bc:	2301      	movs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
    break;
 80064c0:	e005      	b.n	80064ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]
    break;
 80064c6:	e002      	b.n	80064ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	73fb      	strb	r3, [r7, #15]
    break;
 80064cc:	bf00      	nop
  }
  return usb_status;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <main>:




int main(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  bspInit();
 80064e0:	f7fa f800 	bl	80004e4 <bspInit>
  ledInit();
 80064e4:	f7fa f956 	bl	8000794 <ledInit>
  //I2C_Config();

  while(1)
  {

    ledToggle(1);
 80064e8:	2001      	movs	r0, #1
 80064ea:	f7fa f9b9 	bl	8000860 <ledToggle>
    delay(500);
 80064ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064f2:	f7fa f831 	bl	8000558 <delay>
    ledToggle(1);
 80064f6:	e7f7      	b.n	80064e8 <main+0xc>

080064f8 <__libc_init_array>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4d0d      	ldr	r5, [pc, #52]	; (8006530 <__libc_init_array+0x38>)
 80064fc:	4c0d      	ldr	r4, [pc, #52]	; (8006534 <__libc_init_array+0x3c>)
 80064fe:	1b64      	subs	r4, r4, r5
 8006500:	10a4      	asrs	r4, r4, #2
 8006502:	2600      	movs	r6, #0
 8006504:	42a6      	cmp	r6, r4
 8006506:	d109      	bne.n	800651c <__libc_init_array+0x24>
 8006508:	4d0b      	ldr	r5, [pc, #44]	; (8006538 <__libc_init_array+0x40>)
 800650a:	4c0c      	ldr	r4, [pc, #48]	; (800653c <__libc_init_array+0x44>)
 800650c:	f000 f820 	bl	8006550 <_init>
 8006510:	1b64      	subs	r4, r4, r5
 8006512:	10a4      	asrs	r4, r4, #2
 8006514:	2600      	movs	r6, #0
 8006516:	42a6      	cmp	r6, r4
 8006518:	d105      	bne.n	8006526 <__libc_init_array+0x2e>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006520:	4798      	blx	r3
 8006522:	3601      	adds	r6, #1
 8006524:	e7ee      	b.n	8006504 <__libc_init_array+0xc>
 8006526:	f855 3b04 	ldr.w	r3, [r5], #4
 800652a:	4798      	blx	r3
 800652c:	3601      	adds	r6, #1
 800652e:	e7f2      	b.n	8006516 <__libc_init_array+0x1e>
 8006530:	080065c8 	.word	0x080065c8
 8006534:	080065c8 	.word	0x080065c8
 8006538:	080065c8 	.word	0x080065c8
 800653c:	080065cc 	.word	0x080065cc

08006540 <memset>:
 8006540:	4402      	add	r2, r0
 8006542:	4603      	mov	r3, r0
 8006544:	4293      	cmp	r3, r2
 8006546:	d100      	bne.n	800654a <memset+0xa>
 8006548:	4770      	bx	lr
 800654a:	f803 1b01 	strb.w	r1, [r3], #1
 800654e:	e7f9      	b.n	8006544 <memset+0x4>

08006550 <_init>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr

0800655c <_fini>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr
